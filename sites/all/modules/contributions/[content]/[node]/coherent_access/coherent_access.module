<?php
// $Id: coherent_access.module,v 1.2.2.5 2009/02/02 21:47:19 jgraham Exp $
/*
 * @file
 * Provides module functions and definitions for coherent access module
*/


define('COHERENT_ACCESS_VIEW', 1);
define('COHERENT_ACCESS_EDIT', 2);
define('COHERENT_ACCESS_DELETE', 4);

/**
 * See if the node should be governed by coherent_access
 * by checking the node type against the configured types.
 *
 * @param $node
 * @return true if coherent_access applies to the node
 */
function _coherent_access_is_coherently_accessible($node) {
  $types = variable_get('coherent_access_types', '');
  $accessible = !empty($types) && in_array($node->type, $types);
  return $accessible;
}

/**
 * Implementation of hook_form_alter
 */
function coherent_access_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    if (_coherent_access_is_coherently_accessible($form['#node'])) {
      coherent_access_shared_editing($form_id, $form);
    }
  }
}

/**
 * Implementation of hook_block
 */
function coherent_access_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list': 
      $blocks[0] = array('info' => t('Shared Posts'),
          'weight' => 0, 'enabled' => 1, 'region' => 'left');
      return $blocks;
      break;
    case 'configure':
      if ($delta == 0) {
        $form['items'] = array(
          '#type' => 'select',
          '#title' => t('Number of items'),
          '#default_value' => variable_get('coherent_access_block_items', 4),
          '#options' => range(1, 10),
        );
        return $form;
      }
      break;
    case 'save':
      if ($delta == 0) {
         variable_set('coherent_access_block_items', $edit['items']);
      }
      break;
    case 'view':
      if ($delta == 0) {
        $block = array('subject' => t('Shared Posts'),
          'content' => coherent_access_show_my_nodes(variable_get('coherent_access_block_items', 4))
        );
        return $block;
      }
      break;
  }
}

/** 
 * This function returns a list of shared posts limiting it based on the user id and 
 * a limit to the number of posts to be rendered
 *
 * @param int $num the number of posts to list of each type, 0 indicating show all posts
 * @param int $uid the user id to show shared posts for
 */
function coherent_access_show_my_nodes($num = 0, $uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }
    
  $text['mine'] = t('Mine:');
  $text['editor'] = t('Edit:');
  $text['viewer'] = t('View:');
  
  $nodes = coherent_access_get_user_nodes($uid);
  $content = FALSE;

  if (!empty($nodes)) {
    $items = array();
    foreach ($nodes as $mode => $node) {
      if (!empty($node)) {
        $items[$mode]['data'] = $text[$mode];
        $items[$mode]['children'] = array();
        foreach ($node as $nid => $info) {
          $items[$mode]['children'][] = l($info['title'], 'node/'. $nid);
          $content = TRUE;
          if (++$i == $num) {
            $items[$mode]['children'][] = l(t('more...'),  'user/'. $uid .'/shared-posts' );
            break;
          }
        }
      }
    }
  }

  if ($content) {
    return '<div class="coherent-access shared-posts">'. theme('item_list', $items, NULL, 'ul', array('class' => 'coherent-access')) .'</div>';
  }
}

/**
 * Admin settings form for coherent_access
 */
function coherent_access_admin_settings() {
  $types = node_get_types('names');
  
  $form['coherent_access_types'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Node types that are allowed to use coherent access.'),
    '#default_value' => variable_get('coherent_access_types', ''),
    '#size' => min(12, count($types)),
    '#options' => $types,
  );
  
  $form['coherent_access_default_node_private'] = array(
    '#type' => 'checkbox',
    '#title' => t('If checked new nodes will default to private.'),
    '#default_value' => variable_get('coherent_access_default_node_private', 0)
  );
  
  $form['coherent_access_trust_editors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Trust editors'),
    '#description' => t('If checked this will allow editors of a node to add other editors. If unchecked only the author will be able to add editors, and viewers.'),
    '#default_value' => variable_get('coherent_access_trust_editors', TRUE),
  );
  
  $form['coherent_access_send_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send email when viewers or editors are added'),
    '#default_value' => variable_get('coherent_access_send_email', FALSE)
  );
  
  $form['coherent_access_subject'] = array(
    '#type' => 'textarea',
    '#title' => t('Email notification subject'),
    '#default_value' => variable_get('coherent_access_subject', 'You have been added as a %role  for %nodetitle by %sender'),
  );
  
  $form['coherent_access_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email notification body'),
    '#default_value' => variable_get('coherent_access_body', 'You have been added as a %role for %nodetitle by %sender. You can access this by going to %nodeurl'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu
 */
function coherent_access_menu() {
  $items = array();
  global $user; 
  
  $items['admin/settings/coherent-access'] = array(
    'title' => 'Coherent Access',
    'description' => 'Settings for coherent shared access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coherent_access_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['user/%/shared-posts'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Shared Posts',
    'page callback' => 'coherent_access_collaborative_content',
    'page arguments' => array(1),
    'access callback' => 'coherent_access_access_user_shared_posts',
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * This is the form to add shared editors to a node
 *
 * TODO: This needs a serious overhaul. Ideally this should work towards a more AHAH/AJAX setup
 * Right now the processing is pretty bad and requires submission, and a hook_after_build function
 * This would also allow the removal of coherent_access_button
 * 
 */
function coherent_access_shared_editing($form_id, &$form) {
  global $user;
  $node = $form['#node'];

  $editors = array();

  if ($user->uid == $node->uid || variable_get('coherent_access_trust_editors', TRUE) || user_access('administer nodes')) {
    if ($node->nid) {
      // get editors excluding delete privilege (as that is author only)
      $result = db_query("SELECT u.uid, u.name FROM {users} u 
                          LEFT JOIN {coherent_access_user} cu on cu.uid = u.uid
                          LEFT JOIN {coherent_access_gid} cg ON cu.gid = cg.gid
                          WHERE  cg.nid = %d 
                            AND cg.mode & %d AND (cg.mode & %d = %d)",
                          $node->nid, COHERENT_ACCESS_EDIT, COHERENT_ACCESS_DELETE, 0);
      while ($editor = db_fetch_object($result)) {
        $editors[$editor->uid] = $editor->name;
      }
    }
  
    $viewers = array();
    if ($node->nid) {
      $result = db_query("SELECT u.uid, u.name FROM {users} u 
                          LEFT JOIN {coherent_access_user} cu on cu.uid = u.uid
                          LEFT JOIN {coherent_access_gid} cg ON cu.gid = cg.gid
                          WHERE  cg.nid = %d 
                            AND cg.mode = %d", 
                          $node->nid, COHERENT_ACCESS_VIEW);
      while ($viewer = db_fetch_object($result)) {
        $viewers[$viewer->uid] = $viewer->name;
      }
    }
  
    $form['shared_editing'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#title' => t('Shared Editing'),
      '#description' => t('Choose users who can edit and view this content. The content author is always an editor and the only one who can delete.'),
    );

    // see if this node is set as private
    if (isset($node->coherent_access['private'])) {
      $private = $node->coherent_access['private'];
    }
    else {
      $private = variable_get('coherent_access_default_node_private', 0);
    }
  
    $form['shared_editing']['private'] = array(
      '#type' => 'checkbox',
      '#title' => t('Private'),
      '#description' => t('If checked only those users listed as editors, or viewers below, as well as the author will be allowed to view and/or edit.'),
      '#default_value' => $private,
    );

  
    $form['shared_editing']['edit'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => t('Add Editors'),
      '#description' => t('Add & remove additional users who are allowed to edit this content'),
    );

    $form['shared_editing']['edit']['remove_editors'] = array(
      '#type' => 'checkboxes',
    );  // placeholder
  
    $form['shared_editing']['edit']['remove_editors_button'] = array(
      '#type' => 'coherent_access_button',
      '#label' => t('Remove Editors')
    );

    $form['shared_editing']['edit']['add_editor'] = array(
      '#type' => 'textfield',
      '#title' => t('Add editor'),
      '#maxlength' => 32,
      '#size' => 16,
      '#autocomplete_path' => 'user/autocomplete',
    );
    $form['shared_editing']['edit']['add_editor_button'] = array(
      '#type' => 'coherent_access_button',
      '#label' => t('Add Editor'),
    );

    $form['shared_editing']['edit']['editor_list'] = array(
      '#type' => 'hidden',
      '#default_value' => serialize($editors),
    );
  
    $form['shared_editing']['view'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => t('Add Viewers'),
      '#description' => t('If this node is marked as "private" viewers listed below may still view this content.'),
    );
    $form['shared_editing']['view']['remove_viewers'] = array(
      '#type' => 'checkboxes',
    );
    $form['shared_editing']['view']['remove_viewers_button'] = array(
      '#type' => 'coherent_access_button',
      '#label' => t('Remove Viewers'),
    );  
    $form['shared_editing']['view']['add_viewer'] = array(
      '#type' => 'textfield',
      '#title' => t('Add viewer'),
      '#maxlength' => 32,
      '#size' => 16,
      '#autocomplete_path' => 'user/autocomplete',
    );
    $form['shared_editing']['view']['add_viewer_button'] = array(
      '#type' => 'coherent_access_button',
      '#label' => t('Add Viewer'),
    );

    $form['shared_editing']['view']['viewer_list'] = array(
      '#type' => 'hidden',
      '#default_value' => serialize($viewers),
    );
  
    $form['#after_build'][] = 'coherent_access_form_after_build';
  }
}

/**
 * This should be moved away from once the form is rebuilt in a cleaner implementation using AHAH or AJAX
 */
function coherent_access_form_after_build($form, &$form_state) {
  // we need to add any users and delete any users
  $editors = unserialize($form['shared_editing']['edit']['editor_list']['#value']);
  $viewers = unserialize($form['shared_editing']['view']['viewer_list']['#value']);
  
  $added = FALSE;

  if ($form['shared_editing']['edit']['add_editor_button']['#value']) {
    // need to add an editor to our editors list
    $name = $form['shared_editing']['edit']['add_editor']['#value'];
    $u = db_fetch_object(db_query("SELECT uid, name FROM {users} WHERE name = '%s'", $name));
    if (!$u->uid) {
      form_error($form['shared_editing']['edit']['add_editor'], t('Invalid user.'));
    }
    else {
      $editors[$u->uid] = $u->name;
      $form['shared_editing']['edit']['add_editor']['#value'] = NULL; // unset form field
      $added = 'editor';
    }
  }
  else if ($form['shared_editing']['view']['add_viewer_button']['#value']) {
    // need to add a viewer to our viewers list
    $name = $form['shared_editing']['view']['add_viewer']['#value'];
    $u = db_fetch_object(db_query("SELECT uid, name FROM {users} WHERE name = '%s'", $name));
    if (!$u->uid) {
      form_error($form['shared_editing']['edit']['add_editor'], t('Invalid user.'));
    }
    else {
      $viewers[$u->uid] = $u->name;
      $form['shared_editing']['view']['add_viewer']['#value'] = NULL; // unset form field
      $added = 'viewer';
    }
  }
  else if ($form['shared_editing']['edit']['remove_editors_button']['#value'] && is_array($form['shared_editing']['edit']['remove_editors']['#value'])) {
    // need to remove an editor from our editors list
    foreach ($form['shared_editing']['edit']['remove_editors']['#value'] as $uid) {
      $added = 'editor';
      unset($editors[$uid]);
    }
  }
  else if ($form['shared_editing']['view']['remove_viewers_button']['#value'] && is_array($form['shared_editing']['view']['remove_viewers']['#value'])) {
    // need to remove a viewer from our viewers list
    foreach ($form['shared_editing']['view']['remove_viewers']['#value'] as $uid) {
      $added = 'viewer';
      unset($viewers[$uid]);
    }
  }
  
  if (!empty($editors)) {
    $form['shared_editing']['edit']['remove_editors']['#type'] = 'checkboxes';
    $form['shared_editing']['edit']['remove_editors']['#title'] = t("Current Editors");
    $form['shared_editing']['edit']['remove_editors']['#options'] = $editors;
    $form['shared_editing']['edit']['remove_editors']['#value'] = array(); // don't carry value through.
    $form['shared_editing']['edit']['remove_editors'] = form_builder($_POST['form_id'], $form['shared_editing']['edit']['remove_editors'], $form_state);
  }
  else {
    // remove unnecessary form elements
    unset($form['shared_editing']['edit']['remove_editors_button']);
    unset($form['shared_editing']['edit']['remove_editors']);
  }
  
  if (!empty($viewers)) {
    $form['shared_editing']['view']['remove_viewers']['#type'] = 'checkboxes';
    $form['shared_editing']['view']['remove_viewers']['#title'] = t("Current Viewers");
    $form['shared_editing']['view']['remove_viewers']['#options'] = $viewers;
    $form['shared_editing']['view']['remove_viewers']['#value'] = array(); // don't carry value through.
    $form['shared_editing']['view']['remove_viewers'] = form_builder($_POST['form_id'], $form['shared_editing']['view']['remove_viewers'], $form_state);
  }
  else {
    // remove unnecessary form elements
    unset($form['shared_editing']['view']['remove_viewers_button']);
    unset($form['shared_editing']['view']['remove_viewers']);
  }
  
  if (!empty($added)) {
    $form['shared_editing']['#collapsed'] = FALSE;
    if ($added == 'viewer') {
      $id = 'edit-shared-editing-view-add-viewer';
    }
    else {
      $id = 'edit-shared-editing-edit-add-editor';
    }
    $jscript = '$(document).ready(function() { $("#'. $id .'").focus(); });';
    drupal_add_js($jscript, 'inline');
  }
  else {
    $form['shared_editing']['#collapsed'] = TRUE;
  }
  $form['shared_editing']['edit']['editor_list']['#value'] = serialize($editors);
  $form['shared_editing']['view']['viewer_list']['#value'] = serialize($viewers);
  
  return $form;
}

/** 
 * Implementation of hook_nodeapi
 */
function coherent_access_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (_coherent_access_is_coherently_accessible($node)) {
    switch ($op) {
      case 'load':
        $node->coherent_access['editors'] = array();
        $node->coherent_access['viewers'] = array();
        $gids = coherent_access_get_gids($node->nid);
        
        // obtain the private status of our node
        // first, see if their are entries for the node in the node_access table
        $result = db_query('SELECT count(*) FROM {node_access} WHERE realm = "%s" AND nid = %d', 'coherent_access', $node->nid);
        $rows = db_result($result);
        if ($rows > 0) {  // node exists in node_access, determine if grant_view ...
          $result = db_query('SELECT grant_view FROM {node_access} WHERE realm = "%s" AND gid = %d', 'coherent_access', $gids[0]);
          $private = (db_result($result) ? 0 : 1);  //  if there are no gid = $gids[0] rows, it must be private
        }
        else {
          // we don't have an entry for this nid in node_access, so load a predefined default setting for the new node
          $private = variable_get('coherent_access_default_node_private', 0);
        }
        
        $node->coherent_access['private'] = $private;

        
        $result = db_query('SELECT u.uid, u.name FROM {users} u LEFT JOIN {coherent_access_user} ca ON ca.uid = u.uid WHERE ca.gid = %d', $gids[COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT]);
        while ($row = db_fetch_array($result)) {
          $node->coherent_access['editors'][$row['uid']] = $row['name'];
        }
        $result = db_query('SELECT u.uid, u.name FROM {users} u LEFT JOIN {coherent_access_user} ca ON ca.uid = u.uid WHERE ca.gid = %d', $gids[COHERENT_ACCESS_VIEW]);
        while ($row = db_fetch_array($result)) {
          $node->coherent_access['viewers'][$row['uid']] = $row['name'];
        }
        break;
      case 'view':
        $node->content['editors'] = theme('node_editors', $node);
        $node->content['viewers'] = theme('node_viewers', $node);
        break;
      case 'update':
        $gids = coherent_access_get_gids($node->nid);
        $filler = array_fill(0, count($gids), '%d');
        $result = db_query('SELECT cau.uid, cag.mode FROM {coherent_access_user} cau LEFT JOIN {coherent_access_gid} cag ON cau.gid = cag.gid WHERE cag.gid IN('. implode(',', array_fill(0, count($gids), '%d')) .')', $gids); // TEST: make sure this query gets created properly 
        $existing = array();
        while ($row = db_fetch_array($result)) {
          $existing[$row['uid']] = $row['mode'];
        }
        db_query('DELETE FROM {coherent_access_user} WHERE gid IN('. implode(',', array_fill(0, count($gids), '%d')) .')', $gids);
      case 'insert':
        if (isset($node->shared_editing['edit']['editor_list'])) {
          $editors = unserialize($node->shared_editing['edit']['editor_list']);
        }
        if (isset($node->shared_editing['view']['viewer_list'])) {
          $viewers = unserialize($node->shared_editing['view']['viewer_list']);
        }

        $inserts = array();
        if (!empty($editors)) {
          foreach ($editors as $uid => $username) {
            $inserts[$uid] = COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT;
          }
        }
        if (!empty($viewers)) {
          foreach ($viewers as $uid => $username) {
            if (!isset($inserts[$uid])) {
              $inserts[$uid] = COHERENT_ACCESS_VIEW;
            }
          }
        }
      
        $gids = coherent_access_get_gids($node->nid);

        // add a blanket grant for the author
        $inserts[$node->uid] = COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT | COHERENT_ACCESS_DELETE;
        foreach ($inserts as $uid => $mode) {
          if (!empty($uid)) {
            db_query('INSERT INTO {coherent_access_user} (uid, gid) values(%d, %d)', $uid, $gids[$mode]);
          }
        }
        
        // determine who (if any) should receive email
        $params['sender'] = user_load(array('uid' => $node->uid));
        $params['node'] = $node;
        if (variable_get('coherent_access_send_email', FALSE)) {
          $email = array();
          foreach ($inserts as $uid => $mode) {
            if (empty($existing) || !array_key_exists($uid, $existing)) {
              $params['recipient'] = user_load(array('uid' => $uid));
              if ($mode == COHERENT_ACCESS_EDIT | COHERENT_ACCESS_VIEW) {
                $params['role'] = 'editor';
              }
              else {
                $params['role'] = 'viewer';
              }
              $mailkey = 'coherent_access'. $node->nid .'_'. $uid;
              coherent_access_mail($key, $message, $params);
              drupal_mail($mailkey, $params['recipient']->mail, $message['subject'], $message['body']);
            }
          }
        }
        break;
      case 'delete':
          $gids = coherent_access_get_gids($node->nid);
          db_query('DELETE FROM {coherent_access_user} WHERE gid IN('. implode(', ', array_fill(0, count($gids), '%d')) .')', $gids);
          db_query('DELETE FROM {coherent_access_gid} WHERE gid IN('. implode(', ', array_fill(0, count($gids), '%d')) .')', $gids);
          break;
    }
  }
  else {
    // cleanup any access control for node types no longer using coherent access
    $gids = coherent_access_get_gids($node->nid, FALSE);
    if (!empty($gids)) {
      db_query('DELETE FROM {coherent_access_user} WHERE gid IN('. implode(', ', array_fill(0, count($gids), '%d')) .')', $gids);
      db_query('DELETE FROM {coherent_access_gid} WHERE gid IN('. implode(', ', array_fill(0, count($gids), '%d')) .')', $gids);
    }
  }
}


/*
 * Implementation of hook_node_access_records()
 */
function coherent_access_node_access_records($node) {
  $grants = array();
  if (_coherent_access_is_coherently_accessible($node)) {
    $gids = coherent_access_get_gids($node->nid);

    // author grant
    $grants[] = array(  
      'realm' => 'coherent_access',
      'gid' => $gids[COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT | COHERENT_ACCESS_DELETE],
      'grant_view' => TRUE,
      'grant_update' => TRUE,
      'grant_delete' => TRUE,
      'priority' => 0,
    );      
    // edit grant
    $grants[] = array(  
      'realm' => 'coherent_access',
      'gid' => $gids[COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT],
      'grant_view' => TRUE,
      'grant_update' => TRUE,
      'grant_delete' => FALSE,
      'priority' => 0,
    );
    // view grant
    $grants[] = array(  
      'realm' => 'coherent_access',
      'gid' => $gids[COHERENT_ACCESS_VIEW],
      'grant_view' => TRUE,
      'grant_update' => FALSE,
      'grant_delete' => FALSE,
      'priority' => 0,
    );

    // shared_editing comes in via the form, coherent_access is via hook_node_api op='load'
    if ((isset($node->shared_editing['private']) && $node->shared_editing['private']) ||
        (!isset($node->shared_editing['private']) && $node->coherent_access['private'])) {
      $grants[] = array(
        'realm' => 'coherent_access',
        'gid' => $gids[0],
        'grant_view' => FALSE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );    
    }
    else {    
      $grants[] = array(  
        'realm' => 'coherent_access',
        'gid' => $gids[0],
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      );    
    }
  }
  
  return $grants;
}

/*
 * Implementation of hook_node_grants()
 *
 */
function coherent_access_node_grants($account, $op) {
  $grants['coherent_access'] = array();

  // add explicit grants first
  $result = db_query('SELECT gid FROM {coherent_access_user} WHERE uid = %d', $account->uid);
  while ($gid = db_fetch_array($result)) {
    $grants['coherent_access'][] = $gid['gid'];
  }
  
  //now add blanket grants
  $result = db_query('SELECT gid FROM {coherent_access_gid} WHERE mode = %d', 0);
  while ($gid = db_fetch_array($result)) {
    $grants['coherent_access'][] = $gid['gid'];
  }

  return $grants;
}

/**
 * Ideally this will go away with the rework of coherent_access_shared_editing()
 */
function coherent_access_elements() {
  $type['coherent_access_button'] = array('#input' => TRUE, '#button_type' => 'submit', '#executes_submit_callback' => FALSE);
  return $type;
}

/**
 * Ideally this will go away with the rework of coherent_access_shared_editing()
 */
function theme_coherent_access_button($element) {
  $element['#value'] = $element['#label'];
  return theme('button', $element);
}

/**
 * Ideally this will go away with the rework of coherent_access_shared_editing()
 */
function coherent_access_theme() {
  return array(
    'coherent_access_button' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * This function returns a list of gids for a particular node
 * @see hook_node_access_records
 * @param int $nid the node id to return gids for
 * @param bool $create if this is true the gids will be created for the node in question
 */
function coherent_access_get_gids($nid, $create = TRUE) {
  $result = db_query('SELECT * FROM {coherent_access_gid} WHERE nid = %d', $nid);
  $gids = array();
  while ($row = db_fetch_array($result)) {
    $gids[$row['mode']] = $row['gid'];
  }
  
  if (empty($gids) && $create) {
    $gids = coherent_access_create_gids($nid);
  }
  
  return $gids;
}

function coherent_access_collaborative_content($user) {
  drupal_set_title($user->uid < 0 ? t('Shared Posts') : check_plain($user->name));
  $content = coherent_access_show_my_nodes(0, $user->uid);
  if ($content) {
    return $content;
  }
  else {
    return t('No shared posts created yet.');
  }
}

function coherent_access_create_gids($nid) {
  $gids = array();
  $modes = array();
  $modes[] = 0;                                                                     // blanket
  $modes[] = COHERENT_ACCESS_VIEW;                                                  // viewer
  $modes[] = COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT;                           // editor
  $modes[] = COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT | COHERENT_ACCESS_DELETE;  // author
  
  foreach ($modes as $mode) {
    db_query('INSERT INTO {coherent_access_gid} (gid, nid, mode) values(%d, %d, %d)', 0, $nid, $mode);
    $gids[$mode] = db_last_insert_id('coherent_access_gid', 'gid');
  }
  
  return $gids;
}

function coherent_access_mail($key, &$message, $params) {
  $sender = $params['sender'];
  $recipient = $params['recipient'];
  $role = $params['role'];
  $node = $params['node'];
  
  $subject = variable_get('coherent_access_subject', 'You have been added as a %role for %nodetitle by %sender. You can access this by going to %nodeurl');
  $body = variable_get('coherent_access_body', 'You have been added as a %role for %nodetitle by %sender. You can access this by going to %nodeurl');
  
  $urlpath = 'node/'. $node->nid;
  
  $replace = array('%sender' => $sender->name,
                  '%recipient' => $recipient->name,
                  '%role' => $role,
                  '%nodetitle' => $node->title, 
                  '%nodeurl' => url($urlpath, array('absolute' => TRUE)),
                  '%sitename' => variable_get('site_name', 'Drupal'),
                  );
  $message['subject']  = strtr($subject, $replace);
  $message['body'] = strtr($body, $replace);
}

function theme_node_editors($node) {
  $content = array('#value' => '', '#weight' => '-2');
  if (!empty($node->coherent_access['editors'])) {
    $content['#value'] = '<div class="coherent-access-editors">'. t('Editors: ');
    $linked = array();
    foreach ($node->coherent_access['editors'] as $uid => $name) {
      $linked[] = l($name, 'user/'. $uid);
    } 
    $content['#value'] .= implode(', ', $linked);
    $content['#value'] .= '</div>';
  }
  else {
    $content['#value'] =  '';
  }
  return $content;
}

function theme_node_viewers($node) {
  $content = array('#value' => '', '#weight' => '-2');
  if (!empty($node->coherent_access['viewers'])) {
    $content['#value'] = '<div class="coherent-access-viewers">'. t('Viewers: ');
    $linked = array();
    foreach ($node->coherent_access['viewers'] as $uid => $name) {
      $linked[] = l($name, 'user/'. $uid);
    }
    $content['#value'] .= implode(', ', $linked);
    $content['#value'] .= '</div>';
  }
  else {
    $content['#value'] =  '';
  }
  return $content;
}

/*
 * Returns a multidimensional array of node types; mine, editor, viewer (excluding public nodes)
 *  with those being keyed by nid => array('title' => $title, 'type' => $type)
 */
function coherent_access_get_user_nodes($uid) {
  $return = array('mine' => array(), 'editor' => array(), 'viewer' => array());
  
  // load mynodes
  $result = db_query('SELECT n.nid, n.title, n.type FROM {node} n WHERE uid = %d ORDER BY n.changed DESC', $uid);
  while ($row = db_fetch_object($result)) {
    if (_coherent_access_is_coherently_accessible($row)) {
      $return['mine'][$row->nid] = array('title' => $row->title, 'type' => $row->type);
    }
  }
  
  // load editable
  $result = db_query('SELECT n.nid, n.title, n.type
                      FROM {coherent_access_user} cau 
                        LEFT JOIN {coherent_access_gid} cag ON cag.gid = cau.gid 
                        LEFT JOIN {node} n ON cag.nid = n.nid 
                      WHERE cau.uid = %d AND cag.mode = %d
                      ORDER BY n.changed DESC', $uid, COHERENT_ACCESS_VIEW | COHERENT_ACCESS_EDIT);
  while ($row = db_fetch_array($result)) {
    $return['editor'][$row['nid']] = array('title' => $row['title'], 'type' => $row['type']);
  }
  
  // load viewable (excludes fully open/public nodes)
  $result = db_query('SELECT n.nid, n.title, n.type
                      FROM {coherent_access_user} cau 
                        LEFT JOIN {coherent_access_gid} cag ON cag.gid = cau.gid 
                        LEFT JOIN {node} n ON cag.nid = n.nid 
                      WHERE cau.uid = %d AND cag.mode = %d
                      ORDER BY n.changed DESC', $uid, COHERENT_ACCESS_VIEW);
  while ($row = db_fetch_array($result)) {
    $return['viewer'][$row['nid']] = array('title' => $row['title'], 'type' => $row['type']);
  }
  
  return $return;
}

function _coherent_access_user_has_shared_content($uid) {
  $content = coherent_access_get_user_nodes($uid);
  if (!empty($content['mine']) || !empty($content['editor']) || !empty($content['viewer'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
  
}

// this function determines if the currently logged in user 
// can access the shared shared post listing for user $uid
function coherent_access_access_user_shared_posts($auid) {
  global $user;
  
  if ($auid == $user->uid || user_access('administer nodes')) {
    return _coherent_access_user_has_shared_content($auser->uid);  // return true only if the user has shared content
  }
  else {
    return FALSE;
  }
}
