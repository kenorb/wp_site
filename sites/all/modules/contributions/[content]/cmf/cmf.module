<?php
// $Id: cmf.module,v 1.2.2.3 2008/12/03 18:43:45 nunoveloso18 Exp $

/**
 * @file
 * @brief Content management filter module file
 * 
 * This file contains all the common functions used by the module.
 *
 * @attention Copyright (C) 2008 Nuno Veloso <nunoveloso18 (at) gmail (dot) com>
 * @author Nuno Andr√© Veloso Matias (http://www.nunoveloso.org)
 *
 * @warning For more information on licensing, read the LICENCE.txt file.
 */


/**
 * Implementation of hook_help().
 */
function cmf_help($path, $arg) {

  $output = '';

  switch ($section) {

    case "admin/help#cmf":

      $output .= '<p>'.  t('This module adds an easier way for administrators to filter the 
        content on a Drupal site for administration purposes.') .'</p>';

      $output .= '<p>'.  t('It\'s an improvement over the content page in the administration area 
        of Drupal. It can show on the same page nodes and comments and adds new filters like role 
        and author.') .'</p>';

      break;
  }
  return $output;
} 


/**
 * Implementation of hook_perm().
 */
function cmf_perm() {
  return array('admin cmf module', 'filter and manage site content', 'view user content list');
}


/**
 * Implementation of hook_menu().
 */
function cmf_menu() {
  $items = array();
  
	$items['admin/content/filter'] = array(
		'title' => 'Content Management Filter',
		'description' => 'All-in-one advanced filter and management of your site content.',
		'page callback' => 'cmf_admin_content_page',
		'access arguments' => array('filter and manage site content'),
	);

	$items['user/%user/cmf'] = array(
		'title' => 'CMF',
		'description' => 'User-specific content management filter',
		'page callback' => 'cmf_admin_content_page',
		'access callback' => '_cmf_userspace_perms',
		'access arguments' => array('filter and manage site content', 'view user content list'),
		'type' => MENU_LOCAL_TASK,
	);

  return $items;
}


/** 
 * Called when user goes to example.com/admin/content/filter
 *
 * @return the HTML generated from the $form data structure
 */ 
function cmf_admin_content_page() {
  
  if (!isset($_SESSION['cmf_content_kind'])) {
    $_SESSION['cmf_content_kind'] = 'node';
  }
  
  if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
    $true = TRUE;
  }

  $output = drupal_get_form('cmf_filter_form', $true);

  // Call the form first, to allow for the form_values array to be populated.
  switch ($_SESSION['cmf_content_kind']) {
    case 'node':
      if ($_POST['operation'] == 'delete' && $_POST['nodes']) {
        return drupal_get_form('node_multiple_delete_confirm');
      }
      else {
        $output .= drupal_get_form('cmf_admin_nodes_form');    
      }
      break;

    case 'comment':
      if ($_POST['operation'] == 'delete' && $_POST['comments']) {
        return drupal_get_form('comment_multiple_delete_confirm');
      }
      else {
        $output .= drupal_get_form('cmf_admin_comments_form');
      }
      break;
    case 'both':
      $output .= drupal_get_form('cmf_admin_both_form');
  }

  return $output;
}


/**********************
*  FILTERS            *
**********************/ 

/**
 * Defines the form for content administration filters.
 *
 * @ingroup forms
 * @see cmf_filter_form_submit()
 * 
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with forms properties 
 */
function cmf_filter_form(&$form_state, $true = NULL) {
  $session = &$_SESSION['cmf_overview_filter'];
  $session = is_array($session) ? $session : array();
  $filters = cmf_filters($true);

  // general settings display (max rows & content kind)
  $form['general'] = array('#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $form['general']['max-rows'] = array(
    '#type' => 'textfield', 
    '#title' => t('Max rows'),
    '#size' => 5,
    '#default_value' => isset($_SESSION['cmf_max_rows']) ? $_SESSION['cmf_max_rows'] : 50,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['general']['kind'] = array(
    '#type' => 'select', 
    '#title' => t('Content'),
    '#options' => array('node' => t('node'), 'comment' => t('comment'), 'both' => t('both')), 
    '#default_value' => isset($_SESSION['cmf_content_kind']) ? $_SESSION['cmf_content_kind'] : 
                        'node',
    '#prefix' => '<div class="container-inline">',
  );
  $form['general']['buttons']['apply'] = array(
    '#type' => 'submit', 
     '#value' => t('Apply'),
    '#suffix' => '</div>',
  );


  $i = 0;
  $form['filters'] = array('#type' => 'fieldset',
    '#title' => t('Show only items where'),
    '#theme' => 'node_filters',
  );
  foreach ($session as $filter) {
    list($type, $value) = $filter;
    if ($type == 'category') {
      // Load term name from DB rather than search and parse options array.
      $value = module_invoke('taxonomy', 'get_term', $value);
      $value = $value->name;
    }
    else {
      $value = $filters[$type]['options'][$value];
    }
    // avoid not applicable filter verbose
    if ($true && !($type == 'user' || $type == 'blocked' || $type == 'role')) {
      $string = ($i++ ? '<em>and</em> where <strong>%a</strong> is <strong>%b</strong>' : 
        '<strong>%a</strong> is <strong>%b</strong>');
      $form['filters']['current'][] = array('#value' => t($string, 
        array('%a' => $filters[$type]['title'] , '%b' => $value)));
    }
    else {
      $string = ($i++ ? '<em>and</em> where <strong>%a</strong> is <strong>%b</strong>' : 
        '<strong>%a</strong> is <strong>%b</strong>');
      $form['filters']['current'][] = array('#value' => t($string, 
        array('%a' => $filters[$type]['title'] , '%b' => $value)));    
    }
    // those ifs remove the respective option if it is already being filtered on.
    if ($type == 'type') {
      unset($filters['type']);
    }
    if ($type == 'user') {
      unset($filters['users']);
      unset($filters['user']);
    }
    if ($type == 'blocked') {
      unset($filters['blocked']);
    }
    if ($type == 'role') {
      unset($filters['role']);
    }
  }

  // preparing select boxes
  foreach ($filters as $key => $filter) {
    $names[$key] = $filter['title'];

    switch ($key) {
      case 'user':
        $form['filters']['status'][$key] = array(
          '#type'     => 'select', 
          '#options'  => $filter['options'], 
//          '#disabled' => TRUE,
        );
        break;
        
      case 'users':
        $form['filters']['status'][$key] = array(
          '#type'              => 'textfield', 
          '#autocomplete_path' => 'user/autocomplete', 
          '#size'              => 20,
        );
        break;
        
      default: 
        $form['filters']['status'][$key] = array(
          '#type'    => 'select', 
          '#options' => $filter['options'],
        );
    }
  }
  // building radio buttons
  $keyz = array_keys($names);
  $form['filters']['filter'] = array(
    '#type'          => 'radios',
    '#options'       => $names,
    '#default_value' => $keyz[0],
  );
  // building buttons depending on the filter state
  $form['filters']['buttons']['submit'] = array(
    '#type'  => 'submit', 
    '#value' => (count($session) ? t('Refine') : t('Filter')),
  );
  if (count($session)) {
    $form['filters']['buttons']['undo'] = array(
      '#type'  => 'submit', 
      '#value' => t('Undo'),
    );
    $form['filters']['buttons']['reset'] = array(
      '#type'  => 'submit', 
      '#value' => t('Reset'),
    );
  }

  return $form;
}


/** 
 * Handle post-validation form submission.
 *
 * @ingroup forms
 * @see cmf_filter_form($form_state, )
 *
 * @param the ID of the passed form
 * @param array with the form properties values
 */ 
function cmf_filter_form_submit($form, &$form_state) {
  $filters = cmf_filters();
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
  switch ($form_state['values']['op']) {
    case t('Filter'):
    case t('Refine'):
    
      if (isset($form_state['values']['filter'])) {
        $filter = $form_state['values']['filter'];

        // convert AJAX search value to select box value
        if ($filter == 'users') {
          $users = cmf_get_users('name');
          
          $uid = db_result(db_query('
            SELECT uid
            FROM {users}
            WHERE name = "%s"',
            $form_state['values']['users']
          ));

          $form_state['values']['user'] = $uid;
          
          $filter = 'user';
        }

        // Flatten the options array to accommodate hierarchical/nested options.
        $flat_options = form_options_flatten($filters[$filter]['options']);

        if (isset($flat_options[$form_state['values'][$filter]])) {
          $_SESSION['cmf_overview_filter'][] = array($filter, $form_state['values'][$filter]);
        }
      }
      break;
    case t('Undo'):
      array_pop($_SESSION['cmf_overview_filter']);
      break;
    case t('Reset'):
      $_SESSION['cmf_overview_filter'] = array();
      break;
    case t('Apply'):
      $_SESSION['cmf_max_rows'] = $form_state['values']['max-rows'];
      $_SESSION['cmf_content_kind'] = $form_state['values']['kind'];
      
      if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
        $form_state['redirect'] = 'user/'. arg(1) .'/cmf';
      }
      else {
        $form_state['redirect'] = 'admin/content/filter';
      }
      break;
  }
}

/**
 * Theme cmf administration filter form.
 *
 * @themable
 */
function theme_cmf_filter_form($form) {
  $output .= '<div id="cmf_header">';
  $output .= drupal_render($form['general']);
//  $output .= drupal_render($form['kind']);
  $output .= '</div>';
  $output .= '<div id="node-admin-filter">';
  $output .= drupal_render($form['filters']);
  $output .= '</div>';
  $output .= drupal_render($form);
  return $output;
}


/**
 * List node administration filters that can be applied.
 *
 * @param (optional) true if the filter to be built serves the user profile page
 * @return array with filter properties
 */
function cmf_filters($true = NULL) {
  // Regular filters
  $filters['status'] = array('title' => t('node status'),
    'options' => array('status-1'   => t('published'),     'status-0' => t('not published'),
                       'promote-1'  => t('promoted'),      'promote-0' => t('not promoted'),
                       'sticky-1'   => t('sticky'),        'sticky-0' => t('not sticky')));
  $filters['type'] = array('title' => t('node type'), 'options' => node_get_types('names'));
  // The taxonomy filter
  if ($taxonomy = module_invoke('taxonomy', 'form_all', 1)) {
    $filters['category'] = array('title' => t('category'), 'options' => $taxonomy);
  }
  // cmf filters
  if (!$true) {
    $filters['user'] = array('title' => t('user list'), 'options' => cmf_get_users('names'));
    $filters['users'] = array('title' => t('user name'));
    $filters['role'] = array('title' => t('user role'), 'options' => cmf_get_roles('names'));
    $filters['blocked'] = array('title' => t('user status'), 'options' => array(1 => t('active'), 
      0 => t('blocked')));
  }
  return $filters;
}


/**********************
*  QUERIES            *
**********************/

/** 
 * Build the variable parts of the query to be performed regarding the filter status.
 *
 * @return associative array with WHERE JOIN qury parts and respective arguments
 */ 
function cmf_build_filter_query() {
  $filters = cmf_filters();

  // Build query
  $where = $args = array();
  $join = '';
  foreach ($_SESSION['cmf_overview_filter'] as $index => $filter) {
    list($key, $value) = $filter;
    switch ($key) {
      case 'status':
        // Note: no exploitable hole as $key/$value have already been checked when submitted
        list($key, $value) = explode('-', $value, 2);
        $where[] = 'n.'. $key .' = %d';
        break;
      case 'category':
        $table = "tn$index";
        $where[] = "$table.tid = %d";
        $join .= "INNER JOIN {term_node} $table ON n.nid = $table.nid ";
        break;
      case 'type':
        $where[] = "n.type = '%s'";
        break;
      case 'user':
        $where[] = "u.uid = %d"; 
        break;
      case 'role':
        $where[] = "u.uid = ur.uid AND ur.rid = %d"; 
        $join .= "INNER JOIN {users_roles} ur ON u.uid = ur.uid ";
        break;
      case 'users':
        $where[] = "u.name = '%s'"; 
        break;
      case 'blocked':
        $where[] = "u.status = %d AND u.uid != 0";
        break;
    }
    $args[] = $value;
  }
  $where = count($where) ? 'WHERE '. implode(' AND ', $where) : '';

  return array('where' => $where, 'join' => $join, 'args' => $args);
}


/** 
 * Build the header of the result table.
 *
 * @return array respecting tablesort_sql()
 */ 
function cmf_build_header() {

  $header = array();

  if (user_access('filter and manage site content')) {
    $header[] = theme('table_select_header_cell');
  }
  
  switch ($_SESSION['cmf_content_kind']) {
    case 'node':
      $header[] = array('data' => t('Title'), 'field' => 'title');
      $header[] = array('data' => t('Kind'));
      $header[] = array('data' => t('Node Type'), 'field' => 'type');
      if (!(arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0)) {
        $header[] = array('data' => t('Author'), 'field' => 'username');
      }
      $header[] = array('data' => t('Status'), 'field' => 'status');
      $header[] = array('data' => t('Time'), 'field' => 'created', 'sort' => 'desc');
      break;
    case 'comment':
      $header[] = array('data' => t('Subject'), 'field' => 'subject');
      $header[] = array('data' => t('Kind'));
      $header[] = array('data' => t('Node Type'), 'field' => 'type');
      if (!(arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0)) {
        $header[] = array('data' => t('Author'), 'field' => 'username');
      }
      $header[] = array('data' => t('Status'), 'field' => 'status');
      $header[] = array('data' => t('Time'), 'field' => 'created', 'sort' => 'desc');
      break;
    case 'both':
      $header[] = array('data' => t('Title') .'/'. t('Subject'), 'field' => 'title');
      $header[] = array('data' => t('Kind'));
      $header[] = array('data' => t('Node Type'), 'field' => 'type');
      if (!(arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0)) {
        $header[] = array('data' => t('Author'), 'field' => 'username');
      }
      $header[] = array('data' => t('Node Status'), 'field' => 'status');
      $header[] = array('data' => t('Time'), 'field' => 'created', 'sort' => 'desc');
      break;
  }
  if (user_access('filter and manage site content')) {
    $header[] = array('data' => t('Operations'));
  }
  
  return $header;
}


/** 
 * Permform adjusted query.
 *
 * @param array respecting tablesort_sql()
 * @return result of permormed query
 */ 
function cmf_perform_query($header, $kind = NULL) {

  $filter = cmf_build_filter_query();  

  if (is_null($kind)) {
    $kind = $_SESSION['cmf_content_kind'];
  }
  
  if (arg(0) == 'user' && is_numeric(arg(1)) && arg(1) > 0) {
    $filter['where'] .= ' AND u.uid = '. arg(1);
  }

  switch ($kind) {
    case 'node':
      return pager_query('
        SELECT n.nid, n.title, n.type, u.name AS username, u.uid, n.status, n.created, n.changed
        FROM {node} n INNER JOIN {users} u ON n.uid = u.uid '. $filter['join'] . 
        $filter['where'] . 
        tablesort_sql($header), 
        isset($_SESSION['cmf_max_rows']) ? $_SESSION['cmf_max_rows'] : 50, 0, NULL, $filter['args']
      );
      break;
    case 'comment':
      return pager_query('
        SELECT c.cid, c.subject, c.nid, c.comment, c.timestamp AS created, c.status, c.name, 
          c.homepage, u.name AS username, u.uid, n.type
        FROM {comments} c INNER JOIN {node} n ON c.nid = n.nid INNER JOIN {users} u ON u.uid = c.uid 
          '. $filter['join'] . 
        $filter['where'] . 
        tablesort_sql($header), 
        isset($_SESSION['cmf_max_rows']) ? $_SESSION['cmf_max_rows'] : 50, 0, NULL, $filter['args']
      );
      break;
    case 'both':
      $args = array_merge($filter['args'], $filter['args']);
      return pager_query('
        SELECT 0 AS cid, n.nid, n.title, NULL AS comment, n.type, u.name AS username, u.uid, 
          n.status, n.created, n.changed
        FROM {node} n INNER JOIN {users} u ON n.uid = u.uid '. $filter['join'] . 
        $filter['where'] .' 
        UNION
        SELECT c.cid, c.nid, c.subject AS title, c.comment, n.type, u.name AS username, u.uid, 
          c.status, c.timestamp AS created, 0 AS changed
        FROM {comments} c INNER JOIN {node} n ON c.nid = n.nid INNER JOIN {users} u ON u.uid = c.uid 
          '. $filter['join'] .
        $filter['where'] . 
        tablesort_sql($header), 
        isset($_SESSION['cmf_max_rows']) ? $_SESSION['cmf_max_rows'] : 50, 0, NULL, $args
      );
      break;
  }
}


/**********************
*  RESULTS            *
**********************/

module_load_include('inc', 'cmf', '/node');

module_load_include('inc', 'cmf', '/comment');

module_load_include('inc', 'cmf', '/both');


/**********************
*  AUX                *
**********************/

/**
 * Builds a list of available users
 *
 * @param the format in which to return the list
 * @return array of all available users
 */
function cmf_get_users($op) {

  switch ($op) {
    case 'names':
      $result = db_query('
        SELECT uid, name
        FROM {users}
        WHERE uid != 0
        ORDER BY name'
      );

      break;
  }
  
  $users    = array();
  $users[0] = variable_get('anonymous', NULL);

  while ($user = db_fetch_object($result)) {
    $users[$user->uid] = $user->name;
  }
  
  return $users;
}


/**
 * Builds a list of available roles
 *
 * @param the format in which to return the list
 * @return array of all available roles
 */
function cmf_get_roles($op) {

  switch ($op) {
    case 'names':
      $result = db_query('
        SELECT *
        FROM {role}
        ORDER BY name'
      );

      break;
  }

  $roles = array();

  while ($role = db_fetch_object($result)) {
    $roles[$role->rid] = $role->name;
  }
  
  return $roles;
}


/**
 * Get the html code of an image
 *
 * @param the pretended image
 * @return html tag img
 */
function _cmf_get_img($action, $title) {

  $path =  base_path() . drupal_get_path('module', 'cmf') .'/images/'. $action .'.png';

  if ($title == NULL) {
    $html = '<img src="'. $path .'" alt="untitled image" />';
  }
  else {
    $html = '<img src="'. $path .'" title="'. $title .'" alt="'. $title .'" />';
  }

  return $html;
}


/** 
 * Theme (node) type cell on table result.
 *
 * @ingroup themable
 *
 * @param 0 or node type key
 * @return formated (node) type
 */ 
function theme_cmf_type($type) { 

  return db_result(db_query('
    SELECT name
    FROM {node_type}
    WHERE type = "%s"',
    $type
  ));

} 


/** 
 * Implementation of hook_theme().
 *
 * @ingroup themable
 */ 
function cmf_theme() { 
  return array(
    'cmf_filter_form' => array(
//      'file' => 'cmf.module',
      'arguments' => array('form' => NULL)
    ),
    'cmf_user' => array(
//      'file' => 'cmf.module',
      'arguments' => array('uid' => NULL)
    ),
    'cmf_type' => array(
//      'file' => 'cmf.module',
      'arguments' => array('type' => NULL)
    ),
    'cmf_admin_nodes_form' => array(
//      'file' => 'node.inc',
      'arguments' => array('form' => NULL)
    ),
    'cmf_admin_comments_form' => array(
      'file' => 'comment.inc',
      'arguments' => array('form' => NULL)
    ),
    'cmf_admin_both_form' => array(
      'file' => 'both.inc',
      'arguments' => array('form' => NULL)
    ),
  );
}


/** 
 * Theme user cell on table result.
 *
 * @ingroup themable
 *
 * @param user ID
 * @return clickable username with status
 */ 
function theme_cmf_user($uid) { 

  if ($uid == 0) {
    return variable_get('anonymous', NULL);
  }

  $result = db_query('
    SELECT name, status
    FROM {users}
    WHERE uid = %d',
    $uid
  );

  $user = db_fetch_array($result);

  $url_alias = _cmf_get_user_path($uid);
  
  $url = $url_alias ? $url_alias : 'user/'. $uid;

  if ($user['status']) {
    $output .= l($user['name'], $url, array());
  }
  else {
    $output .= l(_cmf_get_img('blocked', t('blocked')) .' '. $user['name'], $url, array(),
      NULL, NULL, FALSE, TRUE);  
  }

  return $output; 
} 


/** 
 * Get the alias path to a user profile
 *
 * @param user ID
 * @return the relative URL of the user profile
 */
function _cmf_get_user_path($uid) {

  return db_result(db_query('
    SELECT dst
    FROM {url_alias}
    WHERE src = "%s";',
    'user/'. $uid
  ));
}


/** 
 * Check user permissions to see menu itme under example.com/user/UID/cmf
 *
 * @param access strings
 * @param access strings
 * @return boolean
 */
function _cmf_userspace_perms($manage_access, $view_access) {
  return (user_access($manage_access) || user_access($view_access));
}