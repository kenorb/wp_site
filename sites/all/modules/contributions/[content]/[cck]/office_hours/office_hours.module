<?php
// $Id: office_hours.module,v 1.1.2.1.2.2 2008/08/08 16:08:50 ozeuss Exp $

/**
 * @file
 * Creates a field and widget for inserting working or office hours per day
 */

/**
 * Implementation of hook_theme().
 */
function office_hours_theme() {
  return array(
    'office_hours_formatter_default' => array (
     'arguments' => array ('element' => NULL),
    ),
    'office_hours'  => array (
     'arguments' => array ('element' => NULL),
    ),
  );
}

/**
 * implementation of hook_init.
 */
function office_hours_init () {
    drupal_add_css(drupal_get_path('module', 'office_hours') .'/office_hours.css');
}

/**
 * Implementation of hook_content_is_empty().
 */
function office_hours_content_is_empty($item, $field) {
  if ( $item['starthours'] == 'none' || $item['endhours'] == 'none' || $item['day'] == 7)  {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_info
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function office_hours_field_info() {
  return array(
    'office_hours' => array(
    	'label' => 'Office Hours',
    	'description' => t('Store office or opening hours in the database.'),
    	'callbacks'=> array (
    	'tables'=> CONTENT_CALLBACK_DEFAULT,
    	'arguments'=> CONTENT_CALLBACK_DEFAULT,
    	),
     ),
  );
}

/**
 * implementation of hook_field 
 * Handle the parameters for a field.
 *
 * @param $op
 * @param $field
 *   The field on which the operation is to be performed.
 * @return
 *   This varies depending on the operation.
 *   - "form": an array of form elements to add to
 *     the settings page.
 *   - "validate": no return value. Use form_set_error().
 *   - "save": an array of names of form elements to
 *     be saved in the database.
 *   - "database columns": an array keyed by column name, with arrays of column
 *     information as values.
 *   - "callbacks": an array describing the field's behaviour regarding hook_field
 *     operations. The array is keyed by hook_field operations ('view', 'validate'...)
 *     and has the following possible values :
 *       CONTENT_CALLBACK_NONE     : do nothing for this operation
 *       CONTENT_CALLBACK_CUSTOM   : use the behaviour in hook_field(operation)
 *       CONTENT_CALLBACK_DEFAULT  : use content.module's default bahaviour
 *     Note : currently only the 'view' operation implements this feature.
 *   - "tables": an array of 'tables' definitions as expected by views.module
 *     (see Views Documentation).
 *   - "arguments": an array of 'arguments' definitions as expected by views.module
 *     (see Views Documentation).
 *   - "filters": an array of 'filters' definitions as expected by views.module
 *     (see Views Documentation).
 *     When providing several filters, it is recommended to use the 'name'
 *     attribute in order to let the user distinguish between them. If no 'name'
 *     is specified for a filter, the key of the filter will be used instead.
 */
function office_hours_field_settings($op, $field) {
  switch ($op) {
    case 'form':
    $options = _create_hours_arr($field, FALSE);
    $optlim = _create_hours_arr($field);
      $form = array();
      $form['hoursformat'] = array(
        '#type' => 'select',
        '#title' => t('Hours format'),
        '#options' => array (t('24 hrs.'), t('12 hrs')),
        '#default_value' => $field['hoursformat'] ? $field['hoursformat'] : 0,
        '#required' => FALSE,
        '#description' => t('Format of the clock. IMPORTANT NOTE: if you do not select "Multiple values", you can enter only one day.'),
      );
      $form['granularity'] = array(
        '#type' => 'select',
        '#title' => t('granularity of time'),
        '#options' => array ( 0 =>t('Hours'), 30=> t('Half hours'), 15=> t('Quarter hours')),
        '#default_value' => $field['granularity'] ? $field['granularity'] : 0,
        '#required' => FALSE,
        '#description' => t('Allow inserting quarter hours, half hours, or only hours of the day'),
      );
       $form['limitstart'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget start hours'),
        '#options' => $options,
        '#default_value' => $field['limitstart']? $field['limitstart'] : FALSE, 
        '#required' => FALSE,
        '#description' => t('Set the allowed start hours. Note: if you just changed the clock format, please submit before changing this.'),
      );
       $form['limitend'] = array(
        '#type' => 'select',
        '#title' => t('Limit widget end hours'),
        '#options' => $options,
        '#default_value' => $field['limitend'] ? $field['limitend'] : FALSE,
        '#required' => FALSE,
        '#description' => t('Set the allowed end hours. Note: if you just changed the clock format, please submit before changing this'),
      );
        $form['defaultstart'] = array(
        '#type' => 'select',
        '#title' => t('Start hours default'),
        '#options' => $optlim,
        '#default_value' => $field['defaultstart']? $field['defaultstart'] : FALSE, 
        '#required' => FALSE,
        '#description' => t('Use this field if you want for specific hours to show by default. Set this AFTER submitting hour limits.'),
      );
       $form['defaultend'] = array(
        '#type' => 'select',
        '#title' => t('End hours default'),
        '#options' => $optlim,
        '#default_value' => $field['defaultend'] ? $field['defaultend'] : FALSE,
        '#required' => FALSE,
        '#description' => t('Use this field if you want for specific hours to show by default Set this AFTER submitting hour limits.'),
      );
      $form['valhrs'] = array(
        '#type' => 'checkbox',
        '#title' => t('Validate hours'),
        '#required' => FALSE,
        '#default_value' => isset($field['valhrs']) ? $field['valhrs'] : 0,
        '#description' => t('Please note that this will work as long as the opening hours are not through midnight.'),
      );
      return $form;
     
  case 'validate':
    $defe = tf_to_mil($field['defaultend']);
    $defs = tf_to_mil($field['defaultstart']);
    $lime = tf_to_mil($field['limitend']);
    $lims = tf_to_mil($field['limitstart']);
        if ($defe<= $defs && $field['defaultend'] !='none' && $field['defaultstart'] !='none') {
          form_set_error('defaultend','Default ending hours are earlier than start hours');
        }
        if ( $lime <= $lims && $field['limitend'] != 'none'  && $field['limitstart'] !='none') {
            form_set_error('limitend','Limit ending hours are earlier than start hours');
        }
        
     break;

    case 'save':
      return array('hoursformat', 'granularity', 'limitstart', 'limitend', 'defaultstart', 'defaultend', 'valhrs');

    case 'database columns':
      $columns = array(
        'day' => array('type' => 'int', 'unsigned' =>TRUE, 'not null' => FALSE),
        'starthours' => array('type' => 'varchar', 'length' => 10 , 'not null' => FALSE, 'sortable' => TRUE),
        'endhours' => array('type' => 'varchar', 'length' => 10 , 'not null' => FALSE, 'sortable' => TRUE),

      );
      return $columns;
      
    case 'filters':
      $allowed_values = content_allowed_values($field);
       if (count($allowed_values)) {
         return array(
           'default' => array(
            'list' => $allowed_values,
             'list-type' => 'list',
             'operator' => 'views_handler_operator_or',
             'value-type' => 'array',
            ),
          );
        }
      else {
        return array(
          'like' => array(
            'operator' => 'views_handler_operator_like',
            'handler' => 'views_handler_filter_like',
          ),
        );
      }
      break;

  }
}

/**
 * implementation of hook_field
 * 
 */
 function office_hours_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
       // drupal_set_message('<pre>'.print_r($field,true).'</pre>');
      foreach ($items as $delta => $item) {
        if (isset($field['valhrs']) ) {
         if (!empty($item['starthours']) && !empty($item['endhours']) ) {
           $error_field = $field['field_name'] .']['. $delta .'][endhours';
           $starthours = tf_to_mil($item['starthours']);
           $endhours = tf_to_mil($item['endhours']);
             if ($starthours > $endhours) {
                form_set_error($error_field, t('Closing hours are earlier than opening hours'));
             }
           }
        }
      }
    break;
  }
}

/**
 * Declare information about a formatter.
 */
function office_hours_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'default',
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}


/**
 * Theme function for 'default' text field formatter.
 */
function theme_office_hours_formatter_default($element) {    
  if (!is_null($element['#item']['day']) ) {
    $daykey= check_plain($element['#item']['day']);
    $days=array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'),3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday') );
    $day= $days[$daykey];
  
    $endhrs=check_plain($element['#item']['endhours']);
    $strhrs=check_plain($element['#item']['starthours']);
  
    if ($field['hoursformat']== 1) {
      $endhrs=convert_to_ampm($endhrs);
      $strhrs=convert_to_ampm($strhrs);
    }
    
    return '<div class="oh-display">'.$day.'- </span><span class="oh-display-hours">'.$strhrs.' - '.$endhrs.'</span></div>';
 }
 return;
}

function office_hours_widget_info() {
  return array(
    'office_hours' => array(
      'label' => t('Office Hours'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function office_hours_elements() {
  return array(
    'office_hours' => array(
      '#input' => TRUE,
      '#columns' => array('day', 'starthours', 'endhours'), '#delta' => 0,
      '#process' => array('office_hours_field_process'),
      ),
 
    );
}

/**
 * Implementation of hook_widget().
 */
function office_hours_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function office_hours_field_process($element, $edit, $form_state, $form) {
  static $iteration = 0; //we'll use this in order to determine what default day to display
  $field = $form['#field_info'][$element['#field_name']];
  $field_day = $element['#columns'][0];
  $field_strhrs = $element['#columns'][1];
  $field_endhrs = $element['#columns'][2];  
  $delta = $element['#delta'];
  $optionshr= _create_hours_arr($field, TRUE);
  $optionday= array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'),3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday'), 7=> t('None'));
  $element[$field_day] = array(
    '#prefix' => '<div class="office-hours-block" style="display:inline">',
    '#type' => 'select',
    '#title' => t('day'),
    '#description' => t($field['widget']['description']),
    '#options' => $optionday,//array_shift($opdays), // $optionday,
    '#required' => $field['required'],
    '#default_value' => isset($element['#value'][$field_day]) ? $element['#value'][$field_day] : $iteration,
 );
 $element[$field_strhrs] = array(
    '#type' => 'select',
    '#title' => t('starthours'),
    '#description' => t($field['widget']['description']),
    '#options' => $optionshr,
    '#required' => $field['required'],
    '#default_value' => isset($element['#value'][$field_strhrs]) ? $element['#value'][$field_strhrs] : $field['defaultstart'],
 );
 $element[$field_endhrs] = array(
    '#type' => 'select',
    '#title' => t('endhours'),
    '#description' => t($field['widget']['description']),
    '#options' =>  $optionshr,
    '#required' => $field['required'],
    '#default_value' => isset($element['#value'][$field_endhrs]) ? $element['#value'][$field_endhrs] : $field['defaultend'],
    '#suffix' => '</div>',
 );
  $form_state['#field_info'][$field['field_name']] = $field;
  if (!isset($element['#value'][$field_day])) {
    $iteration++;
  }
  return $element;
}

/**
 * helper function to create hours array.
 * items are saved in 24 hours string format (i.e '18:00').
 */
function _create_hours_arr($field, $limit = TRUE) {  
 $fl1= $field['limitstart'];
 $fl2= $field['limitend'];
 $gran= ($field['granularity']== 0) ? 60 : $field['granularity'];
 $limst=0; $limend=23; $mins='00'; $mine=60;

  if ($limit === TRUE) {
    if ($fl1 != 'none') {
      list($limst, $mins)= explode(":",$fl1);
    }
    if ($fl2 != 'none') {
      list($limend, $mine)= explode(":",$fl2);
    }
  }
 $ophours['none'] = t('None');
 
  if ($field['hoursformat'] == 1) {   //12-hour clock
    foreach (range($limst,$limend) as $i) { 
      $mincounter= ($i==$limst) ? $mins : 0; //in the first iteration, start the count according to limst. if not, begin from 0
      for(; $mincounter<=45; $mincounter=$mincounter+$gran) { 
        if (!($i==$limend && $mincounter>$mine)) { //last iteration
          $mincounter= ($mincounter==0)? '00' : $mincounter; //preparing the mincounter for use in a string
          $hr=$i.':'.$mincounter;
          $ophours[$hr]=convert_to_ampm($hr);
        }
      }
    }
  }
        
  else { //24-hour clock
      foreach (range($limst,$limend) as $i) { 
        $mincounter= ($i==$limst) ? $mins : 0; 
      for(; $mincounter<=45; $mincounter=$mincounter+$gran) {
        if (!($i==$limend && $mincounter>$mine)) {
          $mincounter= ($mincounter==0)? '00' : $mincounter;
          $hr=$i.':'.$mincounter;
          $ophours[$hr]=$hr;
        }
      }
    }
   }
   return $ophours;
}

/**
 * Helper function for conversion of clock format.
 */
function convert_to_ampm($hour) {
  list($hr, $min)= explode(":",$hour);
  if ($hr== '0') { // midnight
    $hr=12;
    $ampm= ' AM';
  }
  elseif ($hr== 12) { // noon
    $hr=12;
    $ampm= ' PM';
  }
  elseif ($hr>12 && $hr<24) { // a pm time
    $hr= $hr-12;
    $ampm= ' PM';
  }
  else {
    $ampm=' AM';
  }
  
return $hr.':'.$min.$ampm ;
}

function tf_to_mil($hour) {
  list($hr, $min)= explode(":",$hour);
  $hr= $hr*60+$min;
  return $hr;
}

function theme_office_hours ($element) {
	 return $element['#children'];
}
