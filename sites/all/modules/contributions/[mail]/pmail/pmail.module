<?php
// $Id: pmail.module,v 1.3 2007/12/04 15:54:02 smk Exp $

/**
 * @file
 * This module allows you to personalize all emails sent from your site by
 * enhancing the From and Reply-To email addresses with display names in the
 * form "Some Name <foo@example.com>".
 * This is done in a fully configurable way by relying on the token module to
 * provide on-the-fly substitutions, and contains a fall back on the user's
 * login name if the token replacement did't yield a result (for example
 * because a user didn't fill in the name on its profile).
 */

/**
 * Implementation of hook_help().
 */
function pmail_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Provides system-wide personalized display names for email addresses.');
  }
}
/**
 * Implementation of hook_menu().
 */
function pmail_menu() {
  $items['admin/user/pmail'] = array(
    'title' => 'Personalized e-mails',
    'description' => 'Manage personalized mail settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmail_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu callback; generates the settings form.
 */
function pmail_settings() {
  $form['pmail_pattern'] = array(
    '#type' => 'textfield',
    '#title' => t('Display name'),
    '#default_value' => variable_get('pmail_pattern', '[user]'),
    '#description' => t('Type the pattern to construct display names from. Use the syntax [token] to insert a replacement pattern.'),
  );

  $form['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['token_help']['help'] = array(
    '#value' => theme('token_help', 'user'),
  );

  $form['pmail_static_mappings'] = array(
    '#type' => 'textarea',
    '#title' => t('Static display name mappings'),
    '#default_value' => variable_get('pmail_static_mappings', _pmail_static_defaults()),
    '#description' => t('Type in special static replacements in the form <em>email, replacement</em>. Separate multiple entries with newlines. The default entry maps the site email to the site name <em>(@site-name &lt;@site-mail&gt;)</em>.', array('@site-mail' => variable_get('site_mail', ini_get('sendmail_from')), '@site-name' => variable_get('site_name', t('Drupal')) )),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_mail_alter().
 *
 * Enance From and Reply-To addresses with display names in the form
 * Some Name <foo@example.com>.
 */
 function pmail_mail_alter(&$message) {
   $from = personalize_email($from);
  $headers['From'] = personalize_email($headers['From']);
  $headers['Reply-To'] = personalize_email($headers['Reply-To']);
  $message['to'] = 'mail@example.com';
}

/**
 * Enhance an email address with a display name as configured in the settings.
 *
 * @param $mail
 *   The email address to enhance.
 * @return string
 *   The personalized email address.
 */
function personalize_email($mail) {
  global $user;
  static $emails, $statics;

  if (!$mail) {
    return $mail;
  }

  if (!isset($emails[$mail])) {
    if (_pmail_contains_display_name($mail)) {
      // Already contains display name
      $emails[$mail] = $mail;
    }
    else {
      $name = '';

      // Check if email matches a special entry
      if (!isset($statics)) {
        $_statics = variable_get('pmail_static_mappings', _pmail_static_defaults());
        $_statics = str_replace(array("\r\n", "\r"), "\n", $_statics);
        foreach (array_filter(explode("\n", $_statics)) as $line) {
          list($s_mail, $s_name) = explode(',', $line);
          // The name may be empty, the email must not!
          $s_mail = trim($s_mail);
          if ($s_mail) {
            $statics[$s_mail] = trim($s_name);
          }
        }
      }

      if (isset($statics[$mail])) {
        // Found a static mapping
        $name = $statics[$mail];
      }
      else {
        // Check to see if the email belongs to the current user
        if ($user->mail == $mail) {
          $account = $user;
        }
        else {
          // Try to load the corresponding user
          $account = user_load(array('mail' => $mail));
        }
        if ($account) {
          // Perform pattern replacement
          $pattern = variable_get('pmail_pattern', '[user]');
          $name = trim(token_replace($pattern, 'user', $account));

          // If the token replacement didn't yield a result, fall back on the
          // user's login name
          if ($name == '' || $name == $pattern) {
          	$name = $account->name;
          }
        }
      }

      if ($name != '') {
        $emails[$mail] = $name .' <'. $mail .'>';
      }
      else {
        $emails[$mail] = $mail;
      }
    }
  }

  return $emails[$mail];
}

/**
 * Checks whether an email address already contains a display name in the form
 * Some Name <foo@example.com>.
 *
 * @param $mail
 *   The email address to check.
 * @return boolean
 *   Whether the email already contains a display name part.
 */
function _pmail_contains_display_name($mail) {
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  return preg_match("/^(.*) $user@($domain|(\[($ipv4|$ipv6)\]))$/", trim($mail));
}

/**
 * Return default static name mappings.
 *
 * @return string
 *   The default mapping contains one mapping: site email => site name.
 */
function _pmail_static_defaults() {
  return variable_get('site_mail', ini_get('sendmail_from')) .', '. variable_get('site_name', t('Drupal'));
}

