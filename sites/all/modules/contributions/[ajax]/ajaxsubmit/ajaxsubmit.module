<?php
// $Id: ajaxsubmit.module,v 1.5 2008/12/04 18:02:26 nedjo Exp $

/**
 * @file
 * Make designated forms submit via AJAX.
 *
 * Usage:
 *
 * @code
 * $form['#ajaxsubmit'] = TRUE;
 * @endcode
 *
 *
 * Developers can designate one or more custom callbacks to be called when
 * data are returned from an Ajax submit.
 *
 * @code
 * $form['#ajaxsubmit_callbacks'] = array(
 *   'Drupal.MyObject.myCallback',
 * );
 * @endcode
 */

/**
 * Implementation of hook_form_alter().
 */
function ajaxsubmit_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#ajaxsubmit'])) {
    ajaxsubmit_load();
    if (!isset($form['#attributes'])) {
      $form['#attributes'] = array();
    }
    $form['#attributes']['class'] = (isset($form['#attributes']['class']) ? $form['#attributes']['class'] .' ' : '') .'ajaxsubmit';
    $form['#validate'][] = 'ajaxsubmit_prepare';
    $form['#submit'][] = 'ajaxsubmit_prepare';
    $form['#pre_render'][] = 'ajaxsubmit_dispatch';
    $form['ajaxsubmit'] = array(
      '#type' => 'hidden',
      '#value' => 0,
    );
  }
}

/**
 * Implementation of hook_menu().
 */
function ajaxsubmit_menu() {
  $items = array();

  $items['ajaxsubmit'] = array(
    'title' => 'ajaxsubmit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page callback' => 'ajaxsubmit_dispatch'
  );

  return $items;
}

/**
 * Load needed files.
 */
function ajaxsubmit_load() {
  $path = drupal_get_path('module', 'ajaxsubmit');
  drupal_add_js('misc/jquery.form.js');
  drupal_add_js($path . '/ajaxsubmit.js');
  drupal_add_css($path . '/ajaxsubmit.css');
}

/**
 * Helper function to determine if the current form post is via ajaxsubmit.
 */
function _ajaxsubmit_is_ajaxsubmit() {
  return isset($_POST['ajaxsubmit']) && $_POST['ajaxsubmit'];
}

/**
 * Implementation of hook_nodeapi().
 */
function ajaxsubmit_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (_ajaxsubmit_is_ajaxsubmit()) {
    switch ($op) {
      case 'insert':
        $info = array();
        $info['type'] = 'node';
        $info['id'] = $node->nid;
        $info['title'] = check_plain($node->title);
        $info['destination'] = url('node/' . $node->nid);
        if (!isset($_SESSION['ajaxsubmit_info'])) {
          $_SESSION['ajaxsubmit_info'] = array();
        }
        $_SESSION['ajaxsubmit_info']['insert'] = $info;
        break;
    }
  }
}

/**
 * Implementation of hook_comment().
 */
function ajaxsubmit_comment($comment, $op) {
  if (_ajaxsubmit_is_ajaxsubmit()) {
    switch ($op) {
      case 'insert':
        $info = array();
        $info['type'] = 'comment';
        $info['id'] = $comment['cid'];
        $info['title'] = check_plain($comment['subject']);
        $info['destination'] = url('node/'. $comment['nid'], array('fragment' => 'comment-' . $comment['cid']));
        if (!isset($_SESSION['ajaxsubmit_info'])) {
          $_SESSION['ajaxsubmit_info'] = array();
        }
        $_SESSION['ajaxsubmit_info']['insert'] = $info;
        break;
    }
  }
}

/**
 * Cache or retrieve form state.
 */
function ajaxsubmit_form_state($form_state = NULL) {
  static $data;
  if ($form_state !== NULL) {
    $data = $form_state;
  }
  return $data;
}

/**
 * On validate and submit, set the destination.
 *
 * This enables handling of forms that call drupal_goto().
 */
function ajaxsubmit_prepare($form, &$form_state) {
  if (_ajaxsubmit_is_ajaxsubmit()) {
    $_REQUEST['destination'] = 'ajaxsubmit/' . $form['form_id']['#value'];
    // Save a copy of the redirect information.
    // Then unset it to prevent redirection before we can render.
    if (isset($form_state['redirect'])) {
      $form_state['_redirect'] = $form_state['redirect'];
    }
    unset($form_state['redirect']);
    ajaxsubmit_form_state($form_state);
  }
}

/**
 * Return form submit result.
 */
function ajaxsubmit_dispatch($form = NULL) {
  $form_state = ajaxsubmit_form_state();
  // Ensure this is the form that was submitted.
  if ((_ajaxsubmit_is_ajaxsubmit() && isset($form_state) && $form_state['values']['form_id'] == $form['form_id']['#value']) || arg(0) == 'ajaxsubmit') {
    // If we are responding after a redirect, the $form argument (arg(1))
    // will be the form_id.
    if (is_string($form)) {
      $form_id = $form;
      $form = NULL;
    }
    else {
      $form_id = $form['form_id']['#value'];
    }
    $result = array(
      'errors' => form_get_errors(),
      'message' => theme('status_messages'),
      'preview' => isset($form['#prefix']) && isset($form_state['values']['op']) && $form_state['values']['op'] == t('Preview') ? $form['#prefix'] : NULL,
      '__callbacks' => isset($form['#ajaxsubmit_callbacks']) ? $form['#ajaxsubmit_callbacks'] : array(),
      'redirect' => isset($form_state['_redirect']) ? $form_state['_redirect'] : '',
    );
    $result = array_merge($result, array(_ajaxsubmit_insert_info()));

    // Allow other modules to alter the data being returned.
    drupal_alter('ajax_data', $result, 'ajaxsubmit', $form_id, $form, $form_state);

    drupal_json($result);
    module_invoke_all('exit');
    exit();
  }
  return $form;
}

/**
 * Return information on a submit done via AJAX.
 *
 * These data may be used by a client application.
 */
function _ajaxsubmit_insert_info() {
  $info = isset($_SESSION['ajaxsubmit_info']) ? $_SESSION['ajaxsubmit_info'] : array();
  unset($_SESSION['ajaxsubmit_info']);
  return $info;
}

