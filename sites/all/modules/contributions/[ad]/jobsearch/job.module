<?php

// $Id: job.module,v 1.19.2.1 2009/01/02 15:30:59 kbahey Exp $

// Copyright Khalid Baheyeldin 2006-2009 http://2bits.com

define('JOB_NODE_TYPE',        'job_node_type_');
define('RESUME_NODE_TYPE',     'resume_node_type_');

define('JOB_EMAIL',            'job_email');

define('JOB_PERM_APPLY',       'apply for jobs');
define('JOB_PERM_MANAGE',      'manage job applications');

/**
 * Implementation of hook_help().
 */

function job_help($path, $arg) {
  switch ($path) {
    case 'admin/help#job':
      return t('Allows users to apply for jobs posted.');
  }
}

/**
 * Implementation of hook_perm().
 */

function job_perm() {
  return array(
    JOB_PERM_APPLY,
    JOB_PERM_MANAGE,
  );
}

/**
* Implementation of hook_menu().
*/
function job_menu() {
  $items['admin/settings/job'] = array(
    'title' => 'Job',
    'description' => 'Job settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('job_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['job/apply'] = array(
    'page callback'    => 'job_apply',
    'type'             => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['job/clear'] = array(
    'callback' => 'job_clear',
    'type' => MENU_CALLBACK,
    'access arguments' => array(JOB_PERM_MANAGE),
  );

  $items['job/applications'] = array( 
    'page callback' => 'job_view',
    'title' => 'Job applications',
    'type' => MENU_SUGGESTED_ITEM,
    'access arguments' => array(JOB_PERM_MANAGE),
  );

  return $items;
}

function job_admin_settings() {
  $set = 'job';
  $form[$set] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable job application for these content types'),
  );

  foreach(node_get_types() as $type => $name) {
    $form[$set][JOB_NODE_TYPE . $type] = array(
      '#type' => 'checkbox',
      '#title' => $type,
      '#return_value' => 1,
      '#default_value' => variable_get(JOB_NODE_TYPE . $type, 0),
    );
  }

  return system_settings_form($form);
}

/**
 * Implementation of hook_link().
 */

function job_link($type, $node = null, $teaser = FALSE) {
  global $user;
  $links = array();
  if ($type == 'node') {
    // We are viewing a node
    if (variable_get(JOB_NODE_TYPE . $node->type, 0)) {
      // Node type is enabled for job apply
      if (!$user->uid) {
        // User is not logged in
        $links['job_apply'] = array(
          'title' => t('Please login or register to apply'),
          'href'  => 'user/login',
          );
      }
      else {
        // User is logged in
        if (_job_check($node->nid, $user->uid)) {
          // User has applied for this job
          $links['job_apply'] = array(
            'title' => t('You applied for this job'),
          );
          return $links;
        }
        else {
          // User has not applied for this job
          $links['job_apply'] =  array(
            'title' => t('Apply for this job'),
            'href' => "job/apply/$node->nid",
            );
        }
      }
    }
  }
  return $links;
}

/**
 * Implementation of hook_user().
 */

function job_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      if ($user->uid == $account->uid) {
        // User is viewing own account
        if (user_access(JOB_PERM_MANAGE)) {
          return array(t('Job applications') => array(array('value' => l(t('View job applications'), 'job/applications'))));
        }
      }
      break;
  }
}

function job_apply() {
  global $user;
  $job_nid = (int)arg(2);
  $resume_nid = (int)arg(3);

  if (!$user->uid) {
    drupal_set_message(t('Please !login or !register to apply',
      array(
        '!login' => l(t('login'), 'user/login'),
        '!register' => l(t('register'), 'user/register')
      )));
    drupal_goto("node/$nid");
  }

  if (!user_access(JOB_PERM_APPLY)) {
    drupal_set_message(t('You are not authorized to apply for jobs.'));
    drupal_goto("node/$job_nid");
  }

  if (!$job_nid) {
    drupal_set_message(t('No job specified.'));
    drupal_goto("node/$job_nid");
  }

  if ($resume_nid) {
    job_apply_do($job_nid, $resume_nid);
    drupal_goto("node/$job_nid");
  }

  $job = node_load(array('nid' => $job_nid));

  $resume_list = job_resume_list($user->uid); 

  if (!$resume_list) {
    $msg = t('Please !create to apply', array('!create' => l(t('create a resume'), 'node/add')));
    drupal_set_message($msg);
    drupal_goto("node/$job_nid");
  }
  
  if(count($resume_list) == 1) {
    drupal_goto("job/apply/$job_nid/$resume_nid{$resume_list[0]['nid']}");
  }

  $output .= '<br/>' . t('Position: ') . $job->title . '<br>';
  $output .= '<br/>' . t('Select from your resumes below, or !create',
    array('!create' => l(t('create a new resume'), "node/add")));
  $output .= '<br/>';

  foreach($resume_list as $resume) {
    $view  = l(t('view'),  'node/' . $resume['nid']);
    $apply = l(t('apply'), "job/apply/$job_nid/$resume_nid" . $resume['nid']);
    $edit  = l(t('edit'),  'node/' . $resume['nid'] . '/edit');

    $rows[] = array(
      $resume['title'],
      format_interval(time() - $resume['changed']), 
      $view . ' ' . $apply . ' ' . $edit
      );
  }
  $headers = array(t('Resume Title'), t('Last Changed'), t('Operations'));

  $output .= theme('table', $headers, $rows);
  print theme('page', $output);  
}

function job_resume_list($uid) {
  $resume_types = array();
  foreach(node_get_types() as $type => $name) {
    if (variable_get(RESUME_NODE_TYPE . $type, 0)) {
      $resumes_types[] = "'". $type ."'";
    }
  }

  if (!count($resumes_types)) {
    return array();
  }

  $result = db_query("SELECT n.nid, n.title, n.changed FROM {node} n
      WHERE n.type IN (". implode(',', $resumes_types) . ") AND n.uid = %d" , $uid);
  while($row = db_fetch_array($result)) {
    $data[] = $row;
  }
  return $data;
}

function job_apply_do($job_nid, $resume_nid) {
  global $user;

  if (job_user_applied($user->uid, $job_nid)) {
    drupal_set_message(t('You already applied for this position.'));
    drupal_goto("node/$job_nid");
  }

  db_query('INSERT INTO {job} (nid, uid, resume_nid, timestamp, status) VALUES (%d, %d, %d, %d, %d)',
    $job_nid, $user->uid, $resume_nid, time(), 1);

  job_send_email($job_nid, $resume_nid);

  drupal_set_message(t('Thank you. Your application has been submitted.'));
  drupal_goto("node/$job_nid");
}

function job_user_applied($uid, $job_nid) {
  if (db_result(db_query("SELECT COUNT(*) FROM {job} j
    INNER JOIN {node} r ON j.resume_nid = r.nid
    INNER JOIN {node} n ON n.nid = r.nid
    WHERE n.uid = %d
    AND j.nid = %d", $uid, $job_nid))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function job_clear($nid, $uid) {
  if ($nid && $uid) {
    db_query("UPDATE {job} SET status = 0 WHERE nid = %d AND uid = %d", $nid, $uid);
    drupal_set_message(t('Job application #@nid has been cleared.', array('@nid' => $nid)));
  }
  drupal_goto('job/applications');
}

function job_view() {
  global $user;
  print theme('page', theme('job_view', job_get_list($user->uid)));
}

function job_get_list($uid = NULL) {
  $rows = array();
  $sql = "SELECT n.nid, j.uid, j.resume_nid, j.timestamp
    FROM {node} n INNER JOIN {job} j USING(nid)
    WHERE n.uid = %d
    AND j.status = 1
    ORDER by j.timestamp ASC";
  $result = db_query($sql, $uid);
  while ($data = db_fetch_object($result)) {
    $resume = node_load(array('nid' => $data->resume_nid));
    $job    = node_load(array('nid' => $data->nid));
    $rows[] = array(
      'applicant'     => user_load(array('uid' => $data->uid)),
      'resume'        => $resume,
      'job'           => $job,
      'timestamp'     => $data->timestamp,
      );
  }
  return $rows;
}

function theme_job_view($list = array()) {
  $rows = array();
  $header = array(t('Job'), t('Applicant'), t('Resume'), t('Date'), t('Operations'));
  if (count($list)) {
    foreach($list as $data) {
      $applicant = $data['applicant'];
      $resume    = $data['resume'];
      $job       = $data['job'];

      $title     = l($job->title, "node/$job->nid");
      $resume    = l($resume->title, "node/" . $resume->nid);
      $user      = l($applicant->name, "user/$applicant->uid");
      $ops       = l(t('Clear'), "job/clear/$job->nid/" . $applicant->uid);
      $timestamp = format_date($data['timestamp'], 'custom', 'Y-m-d H:i');

      $rows[] = array(
        'data' => array_merge(
          array($title),
          array($user),
          array($resume),
          array($timestamp),
          array($ops)
          )
        );
    }
  }
  else {
    $rows[] = array('data' => array(t('No job applications.')));
  }
  return theme('table', $header, $rows);
}

/**
 * Implemetation of hook_theme().
 *
 */
function job_theme() {
  return array(
    'job_view' => array(
    'arguments' => array('list' => NULL),
    ),
    
   'job_mail' => array(
	   'arguments' => array(
		   'job_node' => NULL,
		   'job_user' => NULL,
		   'resume_node' => NULL,
		   'resume_user' => NULL,
	    ),
    ),
    
    'job_search_item' => array(
      'arguments' => array(
        'item' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */

function job_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'delete':
      // Node is being deleted, delete it from the job table
      db_query("DELETE FROM {job} WHERE nid = %d", $node->nid);
      break;
  }
}

function _job_check($nid, $uid) {
  return db_result(db_query("SELECT COUNT(*) FROM {job} WHERE nid = %d AND uid = %d" , $nid, $uid));
}

/**
 * Implementation of hook_mail().
 */
function job_mail($key, &$message, $params) {
  $result = theme('job_mail', $params['job_node'], $params['job_user'], $params['resume_node'], $params['resume_user']);
  $message['subject'] = $result['subject'];
  $message['body'] = $result['body'];
}

function job_send_email($job_nid, $resume_nid) {
  $params['job_node']    = $job_node = node_load(array('nid' => $job_nid));
  $params['job_user']    = $job_user = user_load(array('uid' => $job_node->uid));
  $params['resume_node'] = $resume_node = node_load(array('nid' => $resume_nid));
  $params['resume_user'] = $resume_user = user_load(array('uid' => $resume_node->uid));

  $from = $resume_user->mail;
  $language = user_preferred_language($account);

  drupal_mail('job', 'job_apply', $job_user->mail, $language, $params, $from);

  watchdog('job', t("%name applied for job $job_node->nid.",
    array('%name' => theme('placeholder', $resume_user->name . " <$from>"))));
}

function theme_job_mail($job_node, $job_user, $resume_node, $resume_user) {
  global $base_url;
  
  $site = variable_get('site_name', 'drupal site');
  $subject = t("[$site] [Job application] for [$job_node->title] by [$resume_user->name]");
  $body  = t("The following user has applied for the above job.\n");
  $body .= t("\nJob: @title",                          array('@title'  => $job_node->title));
  $body .= t("\nJob URL: @url",                        array('@url'    => $base_url . url("node/$job_node->nid")));
  $body .= t("\nApplicant name: @name",                array('@name'   => $resume_user->name));
  $body .= t("\nApplicant email: @email",              array('@email'  => $resume_user->mail));
  $body .= t("\nApplicant URL: @url",                  array('@url'    => $base_url . url("user/$resume_user->uid")));
  $body .= t("\nResume: @title",                       array('@title'  => $resume_node->title));
  $body .= t("\nResume URL: @url",                     array('@url'    => $base_url . url("node/$resume_node->nid")));
  $body .= t("\n\nManage job applications at @manage", array('@manage' => $base_url . url("job/applications")));

  return(array(
    'subject' => $subject,
    'body'    => $body,
    ));
}

function job_search_item($item) {
  return theme('job_search_item', $item);
}

function theme_job_search_item($item) {
  $output .= '<div id="job_search">';
  $output .= l($item['title'], $item['link']) . '<br />';
  $output .= $item['snippet']. '<br />';
  $output .= $item['user'] . ' | ' . format_date($item['date'], 'small'). '<br /><br />';
  $output .= '</div>';

  return $output ;
}


/**
 * Implementation of hook_views_tables():
 * Present fields and filters for user data.
 */
function job_views_tables() {
  $tables['job'] = array(
    'name' => 'job',

    'provider' => 'internal', // won't show up in external list.

    'join' => array(
      'left' => array(
        'table' => 'node',
        'field' => 'nid',
      ),
      'right' => array(
        'field' => 'nid',
      ),
    ),

    'fields' => array(
      'timestamp' => array(
        'name' => t('Job: Date/Time applied for'),
        'sortable' => TRUE,
        'option' => 'integer',
        'handler' => 'views_handler_field_date_small',
        'help' => t('Displays the date/time applied for this Job.'),
      ),
      'uid' => array(
        'name' => t('Resume: Applicant Name'),
        'handler' => 'job_views_handler_field_applicant',
        'sortable' => TRUE,
        'help' => t('Displays the name of the applicant.'),
      ),
      'resume_nid' => array(
        'name' => t('Resume: Node ID'),
        'sortable' => TRUE,
        'option' => 'integer',
        'handler' => 'views_handler_field_int',
        'help' => t('Displays the Node ID of the resume node.'),
      ),
    ),

    'sorts' => array(
      'timestamp' => array(
        'name' => t('Job: Date/time applied for'),
        'help' => t("Sort by the date/time applied for this job"),
      ),
    ),

    'filters' => array(
      'status' => array(
        'name' => t('Job: Application status'),
        'value-type' => 'integer',
        'operator' => 'views_handler_operator_eqneq',
        'list-type' => 'select',
        'list' => array(
          0 => t('Job has no applications'),
          1 => t('Job has one or more applications'),
        ),
        'help' => t('Filter by whether a job has applications or not.'),
      ),
      'uid' => array(
        'field'     => 'uid',
        'name'      => t('Job: Applicant User ID'),
        'operator'  => 'views_handler_operator_eqneq',
        'handler'   => 'job_views_handler_filter_applicant',
        'list-type' => 'select',
        'list' => array(
          'uid_current'  => t('Currently Logged In User'),
          'uid_all'      => t('All Users'),
        ),
      'help' => t('This allows you to filter based on favorites nodes.'),
      ),
    ),
  );
  
  return $tables;
}

function job_views_handler_field_applicant($fieldinfo, $fielddata, $value, $data) {
  $obj = new stdClass();
  $obj = user_load(array('uid' => $value));
  return theme('username', $obj);
}

function job_views_handler_filter_applicant($op, $filter, $filterinfo, &$query) {
  global $user;

  $table_data = _views_get_tables();
  $joininfo = $table_data['job']['join'];
  $joininfo['type'] = 'inner';
  $table_num = $query->add_table('job', FALSE, 1, $joininfo);
  $table = $query->get_table_name('job', $table_num);
  $query->set_distinct();

  switch($filter['value']) {
    case 'uid_current':
      if($user->uid) {
        $query->add_where("$table.uid = $user->uid");
      }
      break;

    case 'uid_all':
      // No special processing needed, since we do an inner join anyways
      break;
  }
}

function job_views_arguments() {
  $args = array();

  $args[] = array(
    'name'    => t('Job: Applied for by User ID'),
    'handler' => 'job_views_handler_argument_applicant',
  );
  return $args;
}

function job_views_handler_argument_applicant($op, &$query, $argtype, $arg = '') {
  if ($op == 'filter' && $arg) {
    $table_data = _views_get_tables();
    $joininfo = $table_data['job']['join'];
    $joininfo['type'] = 'inner';
    $table_num = $query->add_table('job', FALSE, 1, $joininfo);
    $table = $query->get_table_name('job', $table_num);
    $query->set_distinct();

    $query->add_where("$table.uid = $arg");
  }
}

function job_views_default_views() {

  $view = new stdClass();
  $view->name = 'my_applications';
  $view->description = 'My applications: shows job applications by the currently logged in user.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'My applications';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = 'You have not applied for any jobs.';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'my_applications';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->sort = array();
  $view->argument = array();
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
    ),
    array(
      'tablename' => 'node',
      'field' => 'created',
      'label' => '',
      'handler' => 'views_handler_field_date_small',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'job',
      'field' => 'uid',
      'operator' => '=',
      'options' => '',
      'value' => 'uid_current',
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node, job);
  $views[$view->name] = $view;


  $view = new stdClass();
  $view->name = 'job_applications';
  $view->description = 'Job applications: Recruiter/employer view of all jobs applied for.';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Job applications';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = 'There are no job applications.';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'job_applications';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->sort = array();
  $view->argument = array();
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'label' => 'Job',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'options' => 'link',
    ),
    array(
      'tablename' => 'users',
      'field' => 'name',
      'label' => 'Recruiter',
      'sortable' => '1',
    ),
    array(
      'tablename' => 'job',
      'field' => 'uid',
      'label' => 'Applicant',
      'sortable' => '1',
    ),
    array(
      'tablename' => 'job',
      'field' => 'timestamp',
      'label' => 'Date/Time',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'type',
      'operator' => 'OR',
      'options' => '',
      'value' => array(
        0 => 'job',
      ),
    ),
    array(
      'tablename' => 'job',
      'field' => 'status',
      'operator' => '=',
      'options' => '',
      'value' => '1',
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node, users, job);
  $views[$view->name] = $view;

  $view = new stdClass();
  $view->name = 'seeker_applications';
  $view->description = 'Seeker applications: a view that accepts an optional UID argument to list all applications, or a specific user\'s applications';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = TRUE;
  $view->page_title = 'Seeker applications';
  $view->page_header = '';
  $view->page_header_format = '1';
  $view->page_footer = '';
  $view->page_footer_format = '1';
  $view->page_empty = 'There are no job applications.';
  $view->page_empty_format = '1';
  $view->page_type = 'table';
  $view->url = 'seeker_applications';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->sort = array();
  $view->argument = array(
    array(
      'type' => '0',
      'argdefault' => '2',
      'title' => '',
      'options' => '',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array(
    array(
      'tablename' => 'node',
      'field' => 'title',
      'label' => 'Job',
      'handler' => 'views_handler_field_nodelink',
      'sortable' => '1',
      'options' => 'link',
    ),
    array(
      'tablename' => 'users',
      'field' => 'name',
      'label' => 'Recruiter',
      'sortable' => '1',
    ),
    array(
      'tablename' => 'job',
      'field' => 'timestamp',
      'label' => 'Date/Time',
    ),
  );
  $view->filter = array(
    array(
      'tablename' => 'node',
      'field' => 'type',
      'operator' => 'OR',
      'options' => '',
      'value' => array(
        0 => 'job',
      ),
    ),
  );
  $view->exposed_filter = array();
  $view->requires = array(node, users, job);
  $views[$view->name] = $view;
}
