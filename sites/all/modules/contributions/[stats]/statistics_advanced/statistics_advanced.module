<?php
// $Id$

/**
 * @file
 * Adds advanced settings and features for the core Statistics module.
 */

/**
 * Implementation of hook_perm().
 */
function statistics_advanced_perm() {
  return array(
    'exclude visits from the access log',
  );
}

/**
 * Implementation of hook_menu().
 */
function statistics_advanced_menu() {
  $items['admin/reports/settings/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'statistics'),
  );
  $items['admin/reports/settings/advanced'] = array(
    'title' => 'Advanced settings',
    'description' => 'Configure advanced statistics settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('statistics_advanced_settings_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'statistics_advanced.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_link_alter().
 *
 * Removes the node views counter for certain node types.
 */
function statistics_advanced_link_alter(&$links, $node) {
  if (isset($links['statistics_counter'])) {
    $counter_node_types = statistics_advanced_var('counter_node_types');
    if (isset($counter_node_types[$node->type]) && !$counter_node_types[$node->type]) {
      unset($links['statistics_counter']);
    }
  }
}

/**
 * Implementation of hook_boot().
 *
 * Checks to see if this is a unique content view by checking the 'accesslog'
 * table for anonymous views and the 'history' table for authenticated user
 * views.
 */
function statistics_advanced_boot() {
  global $user;

  // Load path handling.
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);

  // Determine of this is a node page and will increment the statistics counter.
  $is_node_visit = (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '' && variable_get('statistics_count_content_views', 0));

  if ($is_node_visit && statistics_advanced_var('ignore_repeat_views')) {
    // Save the current user's uid as we may find from the accesslog table that
    // the user has logged out but has a record in the history table.
    $uid = $user->uid;

    if (!$uid && variable_get('statistics_enable_access_log', 0)) {
      $last_read_accesslog = db_fetch_object(db_query_range("SELECT uid, timestamp FROM {accesslog} WHERE (path = '%s' OR uid > 0) AND sid = '%s' ORDER BY timestamp DESC", array(':path' => $_GET['q'], ':sid' => session_id()), 0, 1));
      if ($last_read_accesslog) {
        if ($last_read_accesslog->uid) {
          $uid = $last_read_accesslog->uid;
        }
        else {
          _statistics_advanced_ignore('nodecounter', $last_read_accesslog->timestamp);
        }
      }
    }

    if ($uid) {
      $last_read_history = db_result(db_query("SELECT timestamp FROM {history} WHERE uid = %d AND nid = %d", array(':uid' => $uid, ':nid' => arg(1))));
      if ($last_read_history) {
        // Repeat user visit (same user id and node id in history table)
        _statistics_advanced_ignore('nodecounter', $last_read_history);
      }
    }
  }
}

/**
 * Implementation of hook_exit().
 *
 * Delete unwanted records.
 */
function statistics_advanced_exit() {
  global $user;

  $is_node_visit = (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '' && variable_get('statistics_count_content_views', 0));

  if ($is_node_visit) {
    // Ignore 404 and 403 node visits.
    if (preg_match('/404 Not Found|403 Forbidden/i', drupal_set_header())) {
      _statistics_advanced_ignore('nodecounter', TRUE);
    }

    /*drupal_load('module', 'node');
    $node = db_fetch_object(db_query("SELECT * FROM {node} WHERE nid = %d", array(':nid' => arg(1))));

    if (!$node || !node_access('view', $node)) {
      // Catch 404 and 403s from being added to the counter.
      _statistics_advanced_ignore('nodecounter', TRUE);
    }
    else {
      // If the node has been previously read by the user and has changed since
      // the last read, count it as a new read.
      $last_read = _statistics_advanced_ignore('nodecounter');
      if ($last_read && $node->changed > $last_read) {
        _statistics_advanced_ignore('nodecounter', FALSE);
      }
    }*/
  }

  // Check if user's access log entry should be ignored based on user role.
  drupal_load('module', 'user');
  if (user_access('exclude visits from the access log')) {
    _statistics_advanced_ignore('accesslog', TRUE);
  }

  // Check if the user's browser is a crawler.
  if (!$user->uid && statistics_advanced_var('ignore_crawlers') && module_exists('browscap')) {
    drupal_load('module', 'browscap');
    $browser = browscap_get_browser();
    if (isset($browser['crawler']) && $browser['crawler']) {
      _statistics_advanced_ignore('accesslog', TRUE);
      if ($is_node_visit) {
        _statistics_advanced_ignore('nodecounter', TRUE);
      }
      if (variable_get('browscap_monitor', 0)) {
        _statistics_advanced_ignore('browscap', TRUE);
      }
    }
  }

  if (_statistics_advanced_ignore('browscap')) {
    browscap_unmonitor();
  }

  if (_statistics_advanced_ignore('nodecounter')) {
    db_query("UPDATE {node_counter} SET daycount = daycount - 1, totalcount = totalcount - 1 WHERE nid = %d AND totalcount > 0 AND daycount > 0", array(':nid' => arg(1)));
  }

  if (_statistics_advanced_ignore('accesslog')) {
    db_query("DELETE FROM {accesslog} WHERE (sid = '%s' AND uid = 0) OR (uid = %d AND uid > 0)", array(':sid' => session_id(), ':uid' => $user->uid));
  }
}

/**
 * Internal function to track which records to ignore.
 */
function _statistics_advanced_ignore($type, $value = NULL) {
  static $ignores = array();
  if (isset($value)) {
    $ignores[$type] = $value;
  }
  else {
    return isset($ignores[$type]) ? $ignores[$type] : FALSE;
  }
}

/**
 * Internal default variables for statistics_advanced_variable_get().
 */
function statistics_advanced_variables() {
  return array(
    'statistics_advanced_ignore_crawlers' => 0,
    'statistics_advanced_ignore_repeat_views' => 1,
    'statistics_advanced_counter_node_types' => array(),
    // Deleted variables set to NULL so they can still be removed if found
    // during uninstall.
    'statistics_advanced_ignore_user_roles' => NULL,
    'statistics_advanced_ignore_roles' => NULL,
  );
}

/**
 * Internal implementation of variable_get().
 */
function statistics_advanced_var($name) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = statistics_advanced_variables();
  }

  $name = 'statistics_advanced_'. $name;

  // @todo Remove when I stop making spelling errors in variable names.
  if (!isset($defaults[$name])) {
    watchdog('statistics_adv', 'Default variable for %variable not found.', array('%variable' => $name));
  }

  return variable_get($name, isset($defaults[$name]) ? $defaults[$name] : NULL);
}
