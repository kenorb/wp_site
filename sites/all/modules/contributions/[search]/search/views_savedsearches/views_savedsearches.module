<?php
// $Id: views_savedsearches.module,v 1.1.2.1 2007/09/05 10:14:42 wimleers Exp $

/**
 * @file
 * This module allows you to save your current configuration of exposed
 * filters for later use. This can be especially useful for Views with a lot
 * of exposed filters.
 *
 * Whenever a View is changed, all saved searches for that View are deleted,
 * to prevent corruption.
 * If the user has JavaScript enabled, the saving and deleting process happens
 * through AHAH, and the new section is displayed below the exposed filters
 * section. When JavaScript is disabled, the new section is displayed above
 * the exposed filters section.
 */


define('AHAH_PATH_DELETE', 'views_savedsearches_ahah/delete');
define('AHAH_PATH_SAVE', 'views_savedsearches_ahah/save');


//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_help().
 */
function views_savedsearches_help($section = '') {
  $output = '';

  switch ($section) {
    case "admin/help#views_savedsearches":
      $output = '<p>'. t("The Views Saved Searches module allows users to save their current configuration of exposed filters for later use.") .'</p>';
      break;
  }

  return $output;
}

/**
 * Implementation of hook_menu().
 */
function views_savedsearches_menu() {
  $items = array();
  $items[AHAH_PATH_SAVE] = array(
    'page callback' => 'views_savedsearches_ahah',
    'page arguments' => array('save'),
    'type' => MENU_CALLBACK,
  );
  $items[AHAH_PATH_DELETE] = array(
    'page callback' => 'views_savedsearches_ahah',
    'page arguments' => array('delete'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/views-savedsearches'] = array(
    'title' => t('Views Saved searches settings'),
    'description' => t('Enable the saved searches form per-view.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_savedsearches_settings'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

function views_savedsearches_theme() {
  return array(
    'views_savedsearches_container' => array(
      'arguments' => array('view', 'views_filters_form_values'),
    ),
    'views_savedsearches_list' => array(
      'arguments' => array('view', 'current_view_matches_sid'),
    ),
  );
}

/**
 * Per-view enable of the form
 */
function views_savedsearches_settings() {
  $result = db_query("SELECT name FROM {views_view}");
  $form['views_savedsearches'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable or disable the saved searches form for the given view'),
  );
  while ($view = db_fetch_object($result)) {
    $form['views_savedsearches']['views_savedsearches_'. $view->name] = array(
      '#title' => $view->name,
      '#type' => 'checkbox',
      '#default_value' => variable_get('views_savedsearches_'. $view->name, FALSE),
    );
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function views_savedsearches_form_alter(&$form, $form_state, $form_id) {
  // Delete all saved searches whenever an edited View is saved.
  if ($form_id == 'views_edit_view') {
    $form['#submit']['_views_savedsearches_views_edit_form_submit'] = array();
  }
}


//----------------------------------------------------------------------------
// Views hooks.

/**
 * Implementation of views_query_alter().
 */
function views_savedsearches_views_pre_view(&$view) {
  if (!variable_get('views_savedsearches_'. $view->name, FALSE)) {
    return;
  }
  $output = '';

  // If we're not in the Panels 2 edit content form, then display the saved
  // searches.
  if (!(arg(0) == 'panels' && arg(1) == 'ajax') && !(arg(0) == 'admin' && arg(1) == 'build' && strpos(arg(2), 'panel') !== FALSE)) {
    _views_savedsearches_configure_ahah(form_clean_id($view->name));

    $output .= '<div id="view-'. form_clean_id($view->name) .'-savedsearches-container" class="views-savedsearches-container clear-block">';
    $output .= theme('views_savedsearches_container', drupal_clone($view), $_GET);
    $output .= '</div>';
  }
  $view->attachment_before = $output;
}


//----------------------------------------------------------------------------
// Form functions.

/**
 * Form building callback; the form used to save a search.
 */
function views_savedsearches_save_search_form($form_state, $view) {
  // Save some properties about the current view.
  $form['variables']['#tree'] = TRUE;
  $form['variables']['vid'] = array('#type' => 'hidden', '#value' => $view->vid);
  // This is needed for the non-AHAH form submit.
  $form['variables']['exposed_filters'] = array('#type' => 'value', '#value' => serialize(_views_savedsearches_params_to_filters($view, $_GET)));

  $form['name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Name'),
    '#size' => 30,
    '#maxlength' => 30,
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save this search'),
  );

  // Make sure we redirect the user to the current view after he has saved the
  // current search. Without this, he would be redirected to the default view,
  // i.e. without any exposed filters configured.
  $form['#redirect'][0] = array($_GET['q']) ."?";
  $params = $_GET;
  array_shift($params);
  foreach($_GET as $k => $v) {
    if (!empty($k) && !empty($v)) {
      $form['#redirect'][1] .= "$k=$v&";
    }
    else {
      $form['#redirect'][1] .= "$v&";
    }
        
  }

  return $form;
}

/**
 * Form validation callback; for views_savedsearches_save_search_form.
 */
function views_savedsearches_save_search_form_validate($form, &$form_state) {
  if (strlen($form_state['values']['name']) == 0) {
    form_set_error('name', t('You must enter a name for this saved search.'));
  }
  elseif (strlen($form_state['values']['name']) > 30) {
    form_set_error('name', t('Your name for this saved search is too long. The name for a saved search can not be longer than 128 characters.'));
  }
}

/**
 * Form submission callback; for views_savedsearches_save_search_form.
 */
function views_savedsearches_save_search_form_submit($form, &$form_state) {
  global $user;

  // Create a new saved search object.
  $saved_search = new StdClass();
  $saved_search->sid = 'new';
  $saved_search->uid = $user->uid;
  $saved_search->vid = $form_state['values']['variables']['vid'];
  $saved_search->name = $form_state['values']['name'];
  $saved_search->filters = $form_state['values']['variables']['exposed_filters'];

  views_savedsearches_save($saved_search);

  drupal_set_message(t("Your %name search was saved!", array('%name' => $saved_search->name)));
}

/**
 * Form building callback; the form to delete a search.
 */
function views_savedsearches_delete_search_form($form_state, $view, $options) {
  // Save some properties about the current view.
  $form['variables']['#tree'] = TRUE;
  $form['variables']['vid'] = array('#type' => 'hidden', '#value' => $view->vid);

  $form['saved_collapse'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
    '#title' => t('Saved searches'),
  );
  $form['saved_collapse']['saved_searches'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#attributes' => array(
      'class' => 'form-checkboxes-horizontal',
    ),
  );

  $form['saved_collapse']['delete'] = array(
    '#type' => 'submit', 
    '#value' => t('Delete'),
  );

  // Make sure we redirect the user to the current view after he has saved the
  // current search. Without this, he would be redirected to the default view,
  // i.e. without any exposed filters configured.
  $form['#redirect'] = $_GET['q'];

  return $form;
}

/**
 * Form submission callback; for views_savedsearches_delete_search_form.
 */
function views_savedsearches_delete_search_form_submit($form, &$form_state) {
  foreach ($form_state['values']['saved_searches'] as $sid => $value) {
    if ($sid == $value) {
      $saved_search = views_savedsearches_load($sid);
      views_savedsearches_delete($sid);
      drupal_set_message(t('Saved search %name deleted.', array('%name' => $saved_search->name)));
    }
  }
}


//----------------------------------------------------------------------------
// AHAH functions.

/**
 * AHAH callback; for both the save search and delete saved search form.
 */
function views_savedsearches_ahah($action) {  
  $vid = $_POST['variables']['vid'];
  parse_str($_POST['views_filters_form'], $views_filters_form_values);
  $_POST['variables']['exposed_filters'] = serialize($views_filters_form_values);

  // Submit the save form with $_POST instead of $form_values.
  call_user_func("views_savedsearches_{$action}_search_form_submit", NULL, $_POST);  

  // Reset $_POST(), to prevent drupal_get_form() from calling the validate
  // and submit hooks. drupal_get_form will be called at least once for the
  // list (which is also the delete form).
  $_POST = array();

  // Output.
  $view = views_get_view($vid);
  $output .= theme('status_messages');
  $output .= theme('views_savedsearches_container', $view, $views_filters_form_values);
  
  print $output;
  exit;
}


//----------------------------------------------------------------------------
// Database functions.

/**
 * Load a saved search
 *
 * @param sid
 *   A saved search id.
 * @return
 *   A saved search object.
 */
function views_savedsearches_load($sid) {
  $saved_search = new StdClass();
  $saved_search->sid = $sid;

  $result = db_query("SELECT * FROM {views_savedsearches} WHERE sid = %d", $sid);
  $obj = db_fetch_object($result);
  if (is_object($obj)) {
    $saved_search = $obj;
    $saved_search->filters = unserialize($saved_search->filters);
  }
  return $saved_search;
}

/**
 * Load multiple saved searches.
 *
 * @param $uid
 *  A user id.
 * @param $vid
 *  A view id.
 * @return
 *  An array of saved search objects.
 */
function views_savedsearches_load_multiple($uid = NULL, $vid = NULL) {
  $saved_searches = array();

  $result = db_query("SELECT sid FROM {views_savedsearches} WHERE uid = %d AND vid = %d ORDER BY name", $uid, $vid);
  while ($row = db_fetch_object($result)) {
    $saved_searches[$row->sid] = views_savedsearches_load($row->sid);
  }
  return $saved_searches;
}

/**
 * Get the number of saved searches, by uid, vid, both or none of both (this
 * is the equivalent of getting the total count).
 *
 * @param $uid
 *  A user id.
 * @param $vid
 *  View id.
 * @return
 *  The count of saved searches, depending on the passed user id and view id.
 */
function views_savedsearches_count($uid = NULL, $vid = NULL) {
  $query = 'SELECT COUNT(sid) FROM {views_savedsearches}';

  if ($uid > 0 && $vid > 0) {
    $result = db_query("$query WHERE uid = %d AND vid = %d", $uid, $vid);
  }
  elseif ($uid > 0) {
    $result = db_query("$query WHERE uid = %d", $uid);
  }
  elseif ($vid > 0) {
    $result = db_query("$query WHERE vid = %d", $vid);
  }
  else {
    $result = db_query($query);
  }

  return db_result($result);
}

/**
 * Delete a saved search.
 *
 * @param $sid
 *   A saved search id.
 */
function views_savedsearches_delete($sid) {
  db_query("DELETE FROM {views_savedsearches} WHERE sid = %d", $sid);
}

/**
 * Save a saved search.
 *
 * @param $saved_search
 *   A saved search object.
 * @return
 *   A saved search id.
 */
function views_savedsearches_save($saved_search) {
  if ($saved_search->sid && $saved_search->sid != 'new') {
    db_query("UPDATE {views_savedsearches} SET uid = %d, vid = %d, name = '%s', filters = '%s' WHERE sid = %d",
      $saved_search->uid,
      $saved_search->vid,
      $saved_search->name,
      $saved_search->sid
    );
  }
  else {
    $saved_search->sid = db_result(db_query('select MAX(sid) + 1 from {views_savedsearches}'));
    db_query("INSERT INTO {views_savedsearches} (sid, uid, vid, name, filters) VALUES(%d, %d, %d, '%s', '%s')",
      $saved_search->sid,
      $saved_search->uid,
      $saved_search->vid,
      $saved_search->name,
      $saved_search->filters
    );
  }
  return $saved_search->sid;
}

/**
 * Get a saved search id by a set of filters.
 *
 * @param $filters
 *   An array container filter name - filter value(s) pairs.
 * @return
 *   A saved search id.
 */
function views_savedsearches_sid_by_filters($filters) {
  $sid = 0;

  if (count($filters)) {
    $sid = db_result(db_query("SELECT sid FROM {views_savedsearches} WHERE filters = '%s'", serialize($filters)));
  }
  return $sid;
}


//----------------------------------------------------------------------------
// Private functions.

/**
 * Form submission callback; for the views_edit_view form.
 */
function _views_savedsearches_views_edit_form_submit($form_id, $form_values) {
  db_query("DELETE FROM {views_savedsearches} WHERE vid = %d", $form_values['vid']);
}

/**
 * Helper function; constructs a params string from an array of filters (can
 * be used as a GET query, similar to the "params" method of jQuery).
 *
 * @param $filters
 *  An array container filter name - filter value(s) pairs.
 * @return
 *  A GET query.
 */
function _views_savedsearches_filters_to_params($filters) {
  $query = '';

  if (is_array($filters)) {
    foreach ($filters as $filter_name => $filter_value) {
      // Distinction between multiple-value filters and single-value filters.
      if (is_array($filter_value)) {
        foreach ($filter_value as $value) {
          if (strlen($query) > 0) {
            $query .= '&';
          }
          $query .= drupal_urlencode($filter_name) . drupal_urlencode('[]') .'='. drupal_urlencode($value);
        }
      }
      else {
        if (strlen($query) > 0) {
          $query .= '&';
        }
        $query .= drupal_urlencode($filter_name) .'='. drupal_urlencode($filter_value);
      }
    }
  }
  return $query;
}

/**
 * Helper function; deconstructs a params string from to an array of filters.
 *
 * @param $params
 *  A string of params (for example a string creaed by the "formSerialize"
 *  method of the jQuery Form Plugin).
 * @return
 *  An array containing filter name - filter value(s) pairs.
 */
function _views_savedsearches_params_to_filters($view, $params) {
  $filters = array();
  $filter_names = array();
  foreach ($view->display as $display) {
    if (isset($display->display_options['filters'])) {
    $filter_names = array_merge($filter_names, array_keys($display->display_options['filters']));
    }
  }
  if (is_array($params)) {
    foreach ($params as $key => $value) {
      if (in_array($key, $filter_names)) {
        $filters[$key] = $value;
      }
    }
  }
  return $filters;
}

/**
 * Helper function; configures some JS settings to make the AHAH forms
 * possible.
 *
 * @param $view_name
 *   Name of a view.
 */
function _views_savedsearches_configure_ahah($view_name) {
  static $required_things_added;
  
  if (!isset($required_things_added)) {
    drupal_add_js(drupal_get_path('module', 'views_savedsearches') .'/views_savedsearches.js', 'module');
    $base_path = base_path();
    $base_path .= (variable_get('clean_url', 0)) ? '' : '?q=';
  	drupal_add_js(
  	  array(
  	    'views_savedsearches' => array(
  	      'paths' => array(
  	        'basePath' => $base_path,
  	        'deletePath' => AHAH_PATH_DELETE,
  	        'savePath' => AHAH_PATH_SAVE,
          ),
  	    ),
  	  ),
  	  'setting'
  	);  
  }

  // Add the current view's name to the JS settings.
	drupal_add_js(
	  array(
	    'views_savedsearches' => array(
	      'view_names' => array($view_name),
	    ),
	  ),
	  'setting'
	);
}

/**
 * Helper function; transforms an array of saved search objects into an array
 * of form options that can be used for a select or checkboxes form item. The
 * key will be the sid (saved search id) and the value a link to the saved
 * search.
 *
 * @param $saved_searches
 *   An array of saved search objects.
 * @param $view_url
 *   The view URL that applies to all saved search objects passed in param 1.
 * @param $current_view_matches_sid
 *   The saved search id that matches the current view (if any).
 * @return
 *   An array of form options.
 */
function _views_savedsearches_saved_searches_to_form_options($saved_searches, $view_url, $current_view_matches_sid = 0) {
  $options = array();

  if (is_array($saved_searches)) {
    foreach ($saved_searches as $sid => $saved_search) {
      $query = _views_savedsearches_filters_to_params($saved_search->filters);

      // If this saved search is active, mark it with a class.
      $class = ($sid == $current_view_matches_sid) ? 'views-savedsearches-is-active' : '';

      $options[$sid] = l($saved_search->name, $view_url, array('attributes' => array('class' => $class), 'query' => $query));
    }
  }
  return $options;
}


//----------------------------------------------------------------------------
// Theming functions.

/**
 * Theming callback; controls the entire output.
 *
 * @param $view
 *   A view oject.
 * @param $views_filters_form_values
 *   An array consisting of key-value pairs, where the keys are the names of
 *   the filters or operators (ops) of a views form. This data can either be
 *   found in $_GET (normal forms) or in $_POST['views_filters_form'] (AHAH
 *   forms).
 */
function theme_views_savedsearches_container($view, $views_filters_form_values) {
  $output = '';

  // Add the CSS and see if the current view matches a sid.
  drupal_add_css(drupal_get_path('module', 'views_savedsearches') .'/views_savedsearches.css', 'module');
  $view_filters = _views_savedsearches_params_to_filters($view, $views_filters_form_values);
  $current_view_matches_sid = views_savedsearches_sid_by_filters($view_filters);

  // The list (also delete saved search form).
  $output .= '<div class="views-savedsearches-list-ahah">';
  $output .= theme('views_savedsearches_list', $view, $current_view_matches_sid);
  $output .= '</div>';
  
  // The save search form.
  $output .= '<div class="views-savedsearches-save-ahah">';
  if (!$current_view_matches_sid && count($view_filters)) {
    $output .= drupal_get_form('views_savedsearches_save_search_form', $view);
  }
  $output .= '</div>';

  return $output;
}

/**
 * Theming callback; themes the list of saved searches.
 *
 * @param $view
 *   A view object.
 * @param $current_view_matches_sid
 *   The saved search id that matches the current view.
 */
function theme_views_savedsearches_list($view, $current_view_matches_sid) {
  global $user;

  $output = '';

  // Load saved searches for the current user, to use them as form options.
  $saved_searches = views_savedsearches_load_multiple($user->uid, $view->vid);
  $options = _views_savedsearches_saved_searches_to_form_options($saved_searches, $view->get_path(), $current_view_matches_sid);

  // Display a list of saved searches (if there are any) and allow the user to
  // delete any of them.  
  if (count($options)) {
    $output .= drupal_get_form('views_savedsearches_delete_search_form', $view, $options, $current_view_matches_sid);
  }
  else {
    $output .= '<p>'. t('No saved searches found for this view.') .'</p>';
  }

  return $output;
}
