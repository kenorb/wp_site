<?php
// $Id: storminvoice.module,v 1.4.4.18 2009/01/06 15:16:22 robertogerola Exp $

/**
 * @file
 */

function storminvoice_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#storminvoice":
      $o = '<p>'. storm_t("Provides invoice support for Storm", 'invoice') .'</p>';
      break;
  }

  return $o;
}

function storminvoice_perm() {
  return array(
                'Storm invoice: access',
                'Storm invoice: add',
                'Storm invoice: delete all',
                'Storm invoice: delete own',
                'Storm invoice: delete of user organization',
                'Storm invoice: edit all',
                'Storm invoice: edit own',
                'Storm invoice: edit of user organization',
                'Storm invoice: view all',
                'Storm invoice: view own',
                'Storm invoice: view of user organization',
  );
}

function storminvoice_init() {
  $settings = array(
                    'storm' => array(
                      'project_invoices_url' => url('storm/project_invoices_js/')
                    ),
              );
  drupal_add_js($settings, 'setting');
  drupal_add_js(drupal_get_path('module', 'storminvoice') .'/storminvoice.js', 'module', 'header', FALSE);
}

function storminvoice_access($op, $node, $account=NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  if ($op == 'create') {
    return user_access('Storm invoice: add');
  }

  if (is_numeric($node)) $node = node_load($node);

  if ($op == 'delete') {
    if (user_access('Storm invoice: delete all')) {
      return TRUE;
    }
    else if (user_access('Storm invoice: delete own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm invoice: delete of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'update') {
    if (user_access('Storm invoice: edit all')) {
      return TRUE;
    }
    else if (user_access('Storm invoice: edit own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm invoice: edit of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }

  if ($op == 'view') {
    if (user_access('Storm invoice: view all')) {
      return TRUE;
    }
    else if (user_access('Storm invoice: view own') && ($account->uid == $node->uid)) {
      return TRUE;
    }
    else if (user_access('Storm invoice: view of user organization') && ($account->stormorganization_nid == $node->organization_nid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function storminvoice_access_sql($sql, $where = array()) {
  if (user_access('Storm invoice: view all')) {
    $where[] = "'storm_access'='storm_access'";
    return storm_rewrite_sql($sql, $where);
  }

  global $user;

  $cond = '';
  if (user_access('Storm invoice: view own')) {
    $cond .= 'n.uid='. $user->uid;
  }
  if (user_access('Storm invoice: view of user organization')) {
    if (!empty($cond)) $cond .= ' OR ';
    $cond .= 'sin.organization_nid='. $user->stormorganization_nid;
  }
  if (empty($cond)) $cond = '0=1';
  $where[] = $cond;

  $where[] = "'storm_access'='storm_access'";
  return storm_rewrite_sql($sql, $where);
}

function storminvoice_storm_rewrite_where_sql($query, $primary_table, $account) {
  static $conds = array();

  if ($conds[$account->uid]) {
    return $conds[$account->uid];
  }

  if (preg_match("/'storm_access'='storm_access'/", $query)) {
    $cond = '';
  }
  else {
    if (user_access('Storm invoice: view all', $account)) {
      return '';
    }

    $cond = '';
    if (user_access('Storm invoice: view own', $account)) {
      $cond .= "${primary_table}.uid=". $account->uid;
    }
    if (user_access('Storm invoice: view of user organization', $account)) {
      if ($cond) $cond .= ' OR ';
      $cond .= ' sin1.organization_nid='. $account->stormorganization_nid;
    }
    if ($cond) {
      $cond = " WHEN 'storminvoice' THEN (SELECT IF($cond,1,0) FROM {storminvoice} sin1 WHERE sin1.vid=${primary_table}.vid) ";
    }
    else {
      $cond = " WHEN 'storminvoice' THEN 0 ";
    }
  }

  $conds[$account->uid] = $cond;
  return $cond;
}

function storminvoice_menu() {
  $items = array();

  $items['storm/project_invoices_js/%/%'] = array(
    'title' => storm_t('Tasks', 'invoice'),
    'page callback' => '_storminvoice_project_invoices_js',
    'page arguments' => array(2, 3),
    'access arguments' => array('Storm invoice: access'),
    'file' => 'storminvoice.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['storm/invoices'] = array(
    'title' => storm_t('Invoices', 'invoice'),
    'description' => storm_t('Storm invoices', 'invoices'),
    'page callback' => 'storminvoice_list',
    'access arguments' => array('Storm invoice: access'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'storminvoice.admin.inc',
  );

  $items['storm/invoice/report/%node/%/%'] = array(
            'title' => storm_t('Invoice', 'invoice'),
            'page arguments' => array(3, 4, 5),
            'description' => storm_t('Storm Invoice', 'invoice'),
            'page callback' => 'storminvoice_report',
            'access arguments' => array('Storm invoice: access'),
            'type' => MENU_CALLBACK,
            'file' => 'storminvoice.admin.inc',
  );

  return $items;
}

function storminvoice_theme() {
  return array(
    'storminvoice_list' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('header', 'invoices', 'itemsperpage', 'totals_topay', 'totals_paid', 'totals'),
    ),
    'storminvoice_view' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'teaser', 'page'),
    ),
    'storminvoice_report' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'report', 'language'),
    ),
    'storminvoice_report_html' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'language'),
    ),
    'storminvoice_report_pdf' => array(
      'file'      => 'storminvoice.theme.inc',
      'arguments' => array('node', 'language'),
    ),
  );
}

function storminvoice_node_info() {
  return array(
    'storminvoice' => array(
      'name' => storm_t('Invoice', 'invoice'),
      'module' => 'storminvoice',
      'description' => storm_t("An invoice for Storm.", 'invoice'),
      'title_label' => storm_t("Description", 'invoice'),
      'has_body' => false,
    )
  );
}

function storminvoice_storm_indexpage() {
  $o = array();
  $o['storminvoice']['title'] =  l(t('Invoices'), 'storm/invoices');
  return $o;
}

function storminvoice_stormorganization_change($organization_nid, $organization_title) {
  $s = "UPDATE {storminvoice} SET organization_title='%s' WHERE organization_nid=%d AND organization_title <> '%s'";
  db_query($s, $organization_title, $organization_nid, $organization_title);
}

function storminvoice_stormproject_change($project_nid, $project_title) {
  $s = "UPDATE {storminvoice} SET project_title='%s' WHERE project_nid=%d AND project_title <> '%s'";
  db_query($s, $project_title, $project_nid, $project_title);
}

function storminvoice_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Storm'), 'storm');
  $breadcrumb[] = l(t('Invoices'), 'storm/invoices');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    $node->requestdate = time();
    $node->duedate = $node->requestdate + (variable_get('storminvoice_payment_days', 30) * 86400);
    $s = "SELECT MAX(CAST(SUBSTRING_INDEX(sin.number, '/', 1) AS SIGNED)) FROM {node} n INNER JOIN {storminvoice} sin ON n.nid=sin.nid
          WHERE n.type='storminvoice' AND YEAR(FROM_UNIXTIME(sin.requestdate))=YEAR(FROM_UNIXTIME(%d))";
    $date = getdate($node->requestdate);
    $node->number = (db_result(db_query($s, $node->requestdate)) + 1) .'/'. $date['year'];

    if (array_key_exists('organization_nid', $_GET) && !$node->organization_nid) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (array_key_exists('project_nid', $_GET) && !$node->project_nid) {
      $node->project_nid = $_GET['project_nid'];
      $p = node_load($node->project_nid);
      $node->organization_nid = $p->organization_nid;
    }

    if ($_SESSION['storminvoice_list_filter']['organization_nid'] && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['storminvoice_list_filter']['organization_nid'];
    }
    if ($_SESSION['storminvoice_list_filter']['project_nid'] && !$node->project_nid) {
      $node->project_nid = $_SESSION['storminvoice_list_filter']['project_nid'];
    }
    $s_org = "SELECT n.nid, n.title FROM {stormorganization} so INNER JOIN {node} n 
              ON so.nid=n.nid WHERE n.status=1 AND so.isactive=1 AND so.iscustomer=1 AND n.type='stormorganization' ORDER BY n.title";
  }
  else {
    $s_org = "SELECT n.nid, n.title FROM {stormorganization} so INNER JOIN {node} n 
              ON so.nid=n.nid WHERE n.status=1 AND so.iscustomer=1 AND n.type='stormorganization' ORDER BY n.title";
  }

  $type = node_get_types('type', $node);

  $form['#attributes']['class'] = 'stormcomponent_node_form';

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -50,
  );

  $form['group1']['number'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Number', 'invoice'),
    '#required' => TRUE,
    '#size' => 10,
    '#default_value' => $node->number,
  );

  $form['group1']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -48,
  );

  $s_org = stormorganization_access_sql($s_org);
  $s_org = db_rewrite_sql($s_org);
  $r = db_query($s_org);
  $organizations = array();
  while ($organization = db_fetch_object($r)) {
    $organizations[$organization->nid] = $organization->title;
    if (!$node->organization_nid) $node->organization_nid = $organization->nid;
  }
  $form['group2']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => storm_t('Organization', 'invoice'),
    '#default_value' => $node->organization_nid,
    '#options' => $organizations,
    '#attributes' => array('onchange' => "stormproject_organization_projects(this, 'edit-project-nid', true, '-')"),
  );

  $s = "SELECT n.nid, n.title FROM {node} AS n INNER JOIN {stormproject} AS spr ON spr.vid=n.vid WHERE spr.organization_nid=%d AND n.status=1 AND n.type='stormproject' ORDER BY n.title";
  $s = stormproject_access_sql($s);
  $s = db_rewrite_sql($s);
  $r = db_query($s, $node->organization_nid);
  $projects = array();
  while ($project = db_fetch_object($r)) {
    $projects[$project->nid] = $project->title;
  }
  $projects = array(0 => '-') + $projects;
  $form['group2']['project_nid'] = array(
    '#type' => 'select',
    '#title' => storm_t('Project', 'invoice'),
    '#default_value' => $node->project_nid,
    '#options' => $projects,
    '#process' => array('storm_dependent_select_process'),
  );

  $form['group2']['reference'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Reference', 'invoice'),
    '#default_value' => $node->reference,
    '#size' => 40,
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -47,
  );

  $form['group3']['requestdate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => storm_t('Request date', 'invoice'),
    '#default_value' => _storm_gmtimestamp_to_date($node->requestdate),
  );

  $form['group3']['duedate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => storm_t('Due date', 'invoice'),
    '#default_value' => _storm_gmtimestamp_to_date($node->duedate),
  );

  $form['group3']['paymentdate'] = array(
    '#type' => 'dateext',
    '#withnull' => 'true',
    '#title' => storm_t('Payment date', 'invoice'),
    '#default_value' => _storm_gmtimestamp_to_date($node->paymentdate),
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'storm_form_group',
    '#weight' => -46,
  );

  $form['group4']['amount'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Amount', 'invoice'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->amount,
  );

  $form['group4']['tax'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Tax', 'invoice'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->tax,
  );

  $form['group4']['total'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Total', 'invoice'),
    '#attributes' => array('readonly' => 'readonly'),
    '#size' => 15,
    '#default_value' => $node->total,
  );

  $form['group4']['totalcustomercurr'] = array(
    '#type' => 'textfield',
    '#title' => storm_t('Total in customer currency', 'invoice'),
    '#size' => 15,
    '#default_value' => $node->totalcustomercurr,
  );

  $form['taxexempt'] = array(
    '#type' => 'checkbox',
    '#title' => storm_t('Tax exempt', 'invoice'),
    '#weight' => -45,
    '#default_value' => $node->taxexempt,
  );

  return $form;
}

function storminvoice_insert($node) {
  _storminvoice_beforesave($node);

  db_query("INSERT INTO {storminvoice}
           (vid, nid,
           number, reference,
           organization_nid, organization_title,
           project_nid, project_title,
           amount, tax, total, totalcustomercurr,
           requestdate, duedate, paymentdate, taxexempt) VALUES
           (%d, %d,
           '%s', '%s',
           %d, '%s',
           %d, '%s',
           %f, %f, %f, %f,
           %d, %d, %d, %d)",
          $node->vid, $node->nid,
          $node->number, $node->reference,
          $node->organization_nid, $node->organization_title,
          $node->project_nid, $node->project_title,
          $node->amount, $node->tax, $node->total, $node->totalcustomercurr,
          $node->requestdate, $node->duedate, $node->paymentdate, $node->taxexempt);

  $_REQUEST['destination'] = 'node/'. $node->nid .'/invoiceitems';
}

function storminvoice_update($node) {
  _storminvoice_beforesave($node);

  db_query("UPDATE {storminvoice} SET
            number='%s', reference='%s',
            organization_nid=%d, organization_title='%s',
            project_nid=%d, project_title='%s',
            amount=%f, tax=%f, total=%f, totalcustomercurr=%f,
            requestdate=%d, duedate=%d, paymentdate=%d, taxexempt=%d WHERE vid = %d",
            $node->number, $node->reference,
            $node->organization_nid, $node->organization_title,
            $node->project_nid, $node->project_title,
            $node->amount, $node->tax, $node->total, $node->totalcustomercurr,
            $node->requestdate, $node->duedate, $node->paymentdate, $node->taxexempt, $node->vid);

}

function _storminvoice_beforesave(&$node) {
  if (is_array($node->requestdate)) $node->requestdate = _storm_date_to_gmtimestamp($node->requestdate);
  if (is_array($node->duedate)) $node->duedate = _storm_date_to_gmtimestamp($node->duedate);
  if (is_array($node->paymentdate)) $node->paymentdate = _storm_date_to_gmtimestamp($node->paymentdate);

  $s = "SELECT n.title FROM {node} AS n 
        INNER JOIN {stormorganization} AS o ON n.vid=o.vid
        WHERE type='stormorganization' AND n.nid=%d";
  $r = db_query($s, $node->organization_nid);
  $o = db_fetch_object($r);
  $node->organization_title = $o->title;

  $s = "SELECT n.title FROM {node} AS n 
        INNER JOIN {stormproject} AS p ON n.vid=p.vid
        WHERE type='stormproject' AND n.nid=%d";
  $r = db_query($s, $node->project_nid);
  $p = db_fetch_object($r);
  $node->project_title = $p->title;

  if (!$node->totalcustomercurr) {
    $node->totalcustomercurr = $node->total;
  }
}

function storminvoice_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {storminvoice} WHERE vid = %d', $node->vid);
      break;
  }
}

function storminvoice_delete($node) {
  db_query('DELETE FROM {storminvoiceitem} WHERE invoice_nid = %d', $node->nid);
  db_query('DELETE FROM {storminvoice} WHERE nid = %d', $node->nid);
}

function storminvoice_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {storminvoice} WHERE vid = %d', $node->vid));
  return $additions;
}

function storminvoice_view($node, $teaser = FALSE, $page = FALSE) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Storm'), 'storm');
  $breadcrumb[] = l(t('Invoices'), 'storm/invoices');
  drupal_set_breadcrumb($breadcrumb);

  return theme('storminvoice_view', $node, $teaser = FALSE, $page = FALSE);
}

function storminvoice_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'storm_admin_settings') {
    $form['storminvoice'] = array(
      '#type' => 'fieldset',
      '#title' => storm_t('Invoices', 'invoice'),
      '#collapsed' => false,
      '#collapsible' => true,
      '#weight' => -9,
    );
    $form['storminvoice']['storminvoice_payment_days'] = array(
      '#type' => 'textfield',
      '#title' => storm_t('Number of days for invoice payment', 'invoice'),
      '#default_value' => variable_get('storminvoice_payment_days', 30),
      '#description' => storm_t('Default number of days for invoice payment', 'invoice'),
      '#size' => 5,
    );
    $form['storminvoice']['storminvoice_payment_modes'] = array(
      '#type' => 'textarea',
      '#title' => storm_t('Modes for invoice payment', 'invoice'),
      '#default_value' => variable_get('storminvoice_payment_modes', ''),
      '#description' => storm_t('Modes for invoice payment', 'invoice'),
    );
    $form['storminvoice']['storminvoice_payment_terms'] = array(
      '#type' => 'textfield',
      '#title' => storm_t('Payment terms', 'invoice'),
      '#default_value' => variable_get('storminvoice_payment_terms', t('Due on receipt')),
      '#description' => storm_t('Payment terms', 'invoice'),
      '#size' => 50,
    );
    $form['storminvoice']['storminvoice_default_taxpercent'] = array(
      '#type' => 'textfield',
      '#title' => storm_t('Default tax percent', 'invoice'),
      '#default_value' => variable_get('storminvoice_default_tax_percent', 20),
      '#description' => storm_t('Defaul tax percent', 'invoice'),
      '#size' => 5,
    );
  }
}

