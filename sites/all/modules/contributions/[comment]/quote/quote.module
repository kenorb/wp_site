<?php
// $Id: quote.module,v 1.29.2.10.2.1 2008/03/28 22:59:59 karthik Exp $

/**
 * @file
 * The quote module provides a filter and appropriate links that allow users to
 * quote nodes and other comments in their own comments.
 */

/**
 * Implementation of hook_menu().
 */
function quote_menu() {
  $items = array();

  $items['admin/settings/quote'] = array(
    'title' => 'Quote',
    'description' => 'Configure the behaviour of the quote module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quote_settings_form'),
    'access arguments' => array('administer filters'),
    'file' => 'quote.admin.inc'
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function quote_init() {
  // Reference quote.css, if it exists.
  drupal_add_css(drupal_get_path('module', 'quote') .'/quote.css');
}

/**
 * Implementation of hook_link().
 */
function quote_link($type, $post = 0, $main = 0) {
  $links = array();

  if (user_access('post comments')) {
    $link = array(
      'title' => t('Quote'),
      'attributes' => array('title' => t('Quote this post in your reply.')),
      'query' => 'quote=1',
      'fragment' => 'comment-form'
    );
    // $post can be either a node or a comment.
    if ($type == 'comment') {
      // Display quote link for comments only if the parent node is accepting
      // comments and has the quote filter enabled.
      $node = menu_get_object();
      if (in_array($node->type, _quote_variable_get('node_types')) && $node->comment == COMMENT_NODE_READ_WRITE) {
        $link['href'] = "comment/reply/$post->nid/$post->cid";
        $link['title'] = t('quote');
        $links['quote'] = $link;
      }
    }
    elseif ($type == 'node' && in_array($post->type, _quote_variable_get('node_types')) && $post->comment == COMMENT_NODE_READ_WRITE && _quote_variable_get('node_link_display')) {
      // Display quote link for nodes only if the node is accepting comments,
      // has the quote filter enabled and has quote_link_display set.
      $link['href'] = "comment/reply/$post->nid";
      $links['quote'] = $link;
    }
  }

  return $links;
}

/**
 * Implementation of hook_form_alter().
 */
function quote_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'comment_form' && isset($_GET['quote']) && $_GET['quote']) {
    $nid = arg(2);
    $cid = arg(3);

    if ($cid) {
      $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = 0', $cid));

      if ($comment->uid) {
        $author = $comment->registered_name;
      }
      else {
        $author = (!empty($comment->name)) ? $comment->name : variable_get('anonymous', 'Anonymous');
      }
      $quote = $comment->comment;
      $subject = $comment->subject;
    }
    elseif ($nid && _quote_variable_get('node_link_display')) {
      $node = node_load(array('nid' => $nid));
      if (in_array($node->type, _quote_variable_get('node_types'))) {
        $quote = $node->body;
        $author = !empty($node->name) ? $node->name : variable_get('anonymous', 'Anonymous');
      }
      else {
        return;
      }
    }
    else {
      return;
    }
    // Add quoted text and preserve existing content (signature etc.).
    $form['comment_filter']['comment']['#default_value'] = '[quote='. $author .']'. $quote ."[/quote]\n". $form['comment_filter']['comment']['#default_value'];
    if (_quote_variable_get('subject_required')) {
      $form['subject']['#required'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_filter().
 */
function quote_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Quote filter'));
    case 'description':
      return t('Converts [quote] tags into &lt;div&gt; tags. Must apply after HTML filters.');
    case 'process':
      return _quote_filter_process($text);
    default:
      return $text;
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function quote_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('
      <p>Quoted content can be placed between [quote] tags in order to be displayed as an indented quote. Every [quote] tag <em>must</em> have a corresponding [/quote] tag. For example:
      <pre>[quote]This is a simple quote.[/quote]</pre> is displayed as:</p>
      <div class="quote-msg"><div class="quote-author">Quote:</div>This is a simple quote.</div>
      <p>Additionally, there is an optional attribute which allows quotes to specify the original author.
      <pre>[quote=Mr. Drupal]This is a quote with an attribution line.[/quote]
      </pre> is displayed as:</p>
      <div class="quote-msg"><div class="quote-author">Mr. Drupal wrote:</div>This is a quote with an attribution line.</div>
      <p>Finally, multiple [quote] tags can be nested within one another. Just remember that every [quote] tag <strong>must</strong> have a corresponding [/quote] tag.
      <pre>
      [quote]I think she says it best...
      [quote=Ms. Quotation]This is a quote nested within another quote.[/quote]
      but you can\'t argue with
      [quote=Ms. Reply]The more quotes, the merrier.
      Just don\'t get too carried away.[/quote]
      And I have nothing more to say.[/quote]</pre> is displayed as:</p>
      <div class="quote-msg"><div class="quote-author">Quote:</div>I think she says it best...
      <div class="quote-msg"><div class="quote-author">Ms. Quotation wrote:</div>This is a quote nested within another quote.</div>
      but you can\'t argue with
      <div class="quote-msg"><div class="quote-author">Ms. Reply wrote:</div>The more quotes, the merrier. Just don\'t get too carried away.</div>
      And I have nothing more to say.</div>
    ');
  }
  else {
    return t('You may quote other posts using [quote] tags.');
  }
}

/**
 * Return a quote module variable.
 *
 * @param $name
 *   The name of the variable to retrieve.
 * @return
 *   The value of the variable requested.
 */
function _quote_variable_get($name = NULL) {
  static $variables = array();

  if (empty($variables)) {
    $defaults = array(
      'node_types' => array('blog', 'story'),
      'node_link_display' => 1,
      'subject_required' => 1
    );
    $variables = variable_get('quote', array());
    $variables = array_merge($defaults, $variables);
  }

  return $name ? $variables[$name] : $variables;
}

/**
 * Replace [quote] tags with markup for display.
 *
 * @param $text
 *   The text with the [quote] tags that need to be replaced with HTML tags.
 *
 * @return $text
 *   Filtered text.
 *
 * @todo Fix this with one preg_replace.
 */
function _quote_filter_process($text) {
  // Thanks: function based on code from punbb.org
  if (strstr($text, '[quote')) {
    $pre = '<div class="quote-msg"><div class="quote-author">';
    $post = '</div>';
    $markup = $pre . t('Quote:') . $post;
    $text = str_replace(array('[quote]', '[quote=]', '[/quote]'), array($markup, $markup, $post), $text);
    $text = preg_replace('#\[quote=(?:"|\')?(.*?)["\']?(?:"|\')?\]#s', $pre . t('%name wrote:', array('%name' => '\\1')) . $post, $text);
  }
  return $text;
}

/**
 * Helper function that returns node types.
 */
function _quote_get_node_types($keys = FALSE) {
  $node_types = node_get_types();
  if (!$keys) {
    foreach ($node_types as $type => $object) {
      $node_types[$type] = $object->name;
    }

    return $node_types;
  }

  return array_keys($node_types);
}
