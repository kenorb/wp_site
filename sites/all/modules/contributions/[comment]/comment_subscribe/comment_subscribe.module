<?php
// $Id: comment_subscribe.module,v 1.2.2.3 2008/12/22 09:40:51 zyxware Exp $

/**
 * @file
 * 
 * This module provides comment followup e-mail notification for 
 * anonymous as well as registered users.
 */
//The mail to be send for the users
define('DEFAULT_MAILTEXT','
Hi !name,

!commname has commented on: "!node_title"

The post is about
----
!node_teaser
----

You can view the comment at the following url
!comment_url

You can stop receiving emails when someone replies to this blog post, 
by going to !link1

You can stop receiving emails when someone replies to your comment, 
by going to !link2

If you have an account at the site and if you have auto-blog-following enabled in your account, you will receive emails like this for all replies to a blog post you commented on. You can disable this unchecking the flag at the time you post the comment.


Thanks for your feedback,

Webmaster of !site 
!mission
!uri 
');
//The mail to be send for the author
define('DEFAULT_AUTHOR_MAILTEXT', '
Hi !name,

!commname has commented on: "!node_title"


You can view the comment at the following url
!comment_url

You can stop receiving emails when someone replies to this blog post,
by going to !link1

Thanks for your feedback,

Webmaster of !site
!mission
!uri
');
/**
 * Implementation of hook_help().
 */
function comment_subscribe_help($path, $arg) {
  switch ( $path ) {
    case 'admin/modules#description':
      return t('Comment follow-up e-mail notification for anonymous as well as registered users.');
      break;
  }
}
/**
 * Implementation of hook_menu().
 */
function comment_subscribe_menu() {
  $items = array();
  global $user;
  $items['admin/content/comment_subscribe'] = array(
		'title' => t('Comment Subscribe'),
  	'description' => t('Comment follow-up mail subscription.'),
   	'page callback' => 'drupal_get_form',
		'page arguments' => array('comment_subscribe_settings'),
		'access arguments' => array('administer comment_subscribe'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'comment_subscribe.admin.inc'
	);
  $items['comment_subscribe'] = array(
		'title' => t('Comment Subscribe') ,
    'page callback' => 'comment_subscribe_page',
    'access callback' => 'user_access',
   	'access arguments' => array('disable comments'),
    'type' => MENU_CALLBACK
	);
  return $items;
}
/**
 * Implementation of hook_perm().
 */
function comment_subscribe_perm() {
  return array('administer comment_subscribe', 'disable comments');
}
/*
 *Funtion to save the node subscription flag when an author creates a node
 */
function comment_subscribe_nodeapi(&$node, $op, $teaser, $page) {
  
  switch ( $op ) {
     case 'insert':
      $sql = "INSERT INTO {z_nodesubscribe} (nid, uid, nodesubscribe) 
      values(%d, %d, %d)";    
      db_query($sql, $node->nid, $node->uid, $node->nodesubscribe);
     break;
  }

}
/** 
 * Insert our checkbox, and populate fields.
 * set validation hook.
 */
function comment_subscribe_form_alter(&$form, $form_state, $form_id) { 
  global $user;
  //Checking whether the form is comment_form or not.
  if ( ($form_id == 'comment_form')) {
    $op = isset($_POST['op']) ? $_POST['op'] : '';
    if ($op == t('Preview')) {
       drupal_set_message(t('ATTENTION: your comment is NOT YET posted -
  			please click the post button to confirm your post' )
       );
       //extra submit button on top
       if (!form_get_errors() && ((variable_get('comment_preview', 
         COMMENT_PREVIEW_REQUIRED) == COMMENT_PREVIEW_OPTIONAL)  
         || ($op == t('Preview')) || ($op == t('Save')))) 		{
         $form['submitextra'] = array(
  					'#type' => 'fieldset',
            '#title' => t('Comment is not posted yet - please click 
  					post button to confirm your post'),
            '#weight' => -99,
            '#collapsible' => FALSE
         );
         $form['submitextra']['submit'] = array('#type' => 'submit',
  				'#value' => t('Save'), '#weight' => -20);
       }
    }
    if(variable_get("comment_subscribe_node_alert",FALSE)) {
  	    $form['commentsubscribenode'] = array(
  	    	'#type' => 'checkbox',
  	        '#prefix' => '<div id = "comment_suscribe">',
    		'#suffix' => '</div>', 
  	    	'#title' => t('Email me about all replies to this article.'), 
        	'#default_value' => ($user->uid != 0)?$user->comment_subscribe_mailalert:variable_get
  			("comment_subscribe_default_anon_mailalert", FALSE)
  	    );
    }
    else	if ( ($user->uid == 0) || ( variable_get(
  		"comment_subscribe_regged_checkbox", TRUE) ) ) {
      $form['commentsubscribe'] = array(
        '#type' => 'checkbox',
        '#prefix' => '<div id = "comment_suscribe">',
    	'#suffix' => '</div>', 
        '#title' => t('Email me about replies to this comment.'), 
         '#default_value' => ($user->uid != 0)?$user->comment_subscribe_mailalert:variable_get
  			("comment_subscribe_default_anon_mailalert", TRUE)
      );
    }
    else {
      $form['commentsubscribe'] = array(
      '#type' => 'hidden',
      '#title' => t('Mail me updates to this comment.'), 
      '#default_value' =>$user->comment_subscribe_mailalert
      );
    }
    if ( $form['cid']['#value'] != '' )  {
        //Get the subscribe status of current comment from z_commentsubscribe table
        $subsrberslt = db_fetch_object(db_query("SELECT subscribe,subscribenode FROM
        {z_commentsubscribe} 
        WHERE cid = %d", arg(2)));
        $subscribestatus = $subsrberslt->subscribe;
        $subscribenodestatus = $subsrberslt->subscribenode;   
        $form['commentsubscribe']['#default_value'] =  $subscribestatus;
        $form['commentsubscribenode']['#default_value'] =  $subscribenodestatus;
    }
  }
  else if ($form['#id'] == 'node-form' ) {
      $subsrberslt = db_fetch_object(db_query("SELECT nodesubscribe FROM
      {z_nodesubscribe} WHERE nid = %d", arg(1)));
      $subscribestatus = $subsrberslt->nodesubscribe;
      $form['nodesubscribe'] = array(
        '#type' => 'checkbox',
        '#prefix' => '<div id = "comment_suscribe">',
    	'#suffix' => '</div>', 
        '#title' => t('Email me about replies to this node.'), 
         '#default_value' => ($user->uid != 0?$subscribestatus:1)
    );
  }
  else {
    return;
  }
}

/**
 * Implementation of hook_user().
 */
function comment_subscribe_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {

    case 'form':
      if ( $category == 'account' ) {
        $form = array();
        $form['comment_subscribe_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Comment follow up subscription settings'),
            '#weight' => 4,
            '#collapsible' => TRUE
            );
        $form['comment_subscribe_settings']['comment_subscribe_mailalert'] = array(
            '#type' => 'checkbox',
            '#title' => t('Receive comment follow-up notification e-mails'),
            '#default_value' => isset($edit['comment_subscribe_mailalert']) ? $edit['comment_subscribe_mailalert'] : 1,
            '#description' => t('Check this box to receive e-mail notification for follow-up comments to comments you		posted. ')
            );
        return $form;
      }
      break;
  }
}
/**  
 * Implement comment hook and check the publish status
 */
function comment_subscribe_comment($comment, $op) {
  global $user;
  switch($op) {
    case 'publish':
      //Converting array to object 
			if( is_array( $comment ) ) {
				
				$comment = (object)$comment;
			}
      _comment_subscribe_mailalert($comment);
      break;
  	case 'update':
			//If node subscription is selected
			if(variable_get("comment_subscribe_node_alert",FALSE)) {
			  $sql = "update {z_commentsubscribe} set subscribenode =%d where 
	      cid = %d";		
			  db_query($sql, $comment['commentsubscribenode'], $comment['cid']);
			}
			//If comment reply subscription is selected
			else {
			  $sql = "update {z_commentsubscribe} set subscribe = %d where 
	      cid = %d";		
			  db_query($sql, $comment['commentsubscribe'], $comment['cid']);
			}
      break;
    case 'insert':
		case 'Save':
      //Get pid from comment for current cid ,get the parents for 
      //this cid 
      $notifyval = 0;
 			$parentrslt = db_fetch_object(db_query("SELECT pid FROM
			{comments} 
			WHERE cid = %d", $comment['cid']));
			$strparents = $parentrslt->pid.',';
			$prvparnt = db_fetch_object(db_query("SELECT parents FROM 		
			{z_commentsubscribe} 
			WHERE cid = %d", $parentrslt->pid));
      $parents = $prvparnt->parents.$strparents;
      //Checking which option is selected ie checking
      //whether node reply or comment reply is chosen.
      //According to the selection flag subscription is saved.
			if(variable_get("comment_subscribe_node_alert",FALSE)) {
				$sql = "insert into {z_commentsubscribe} (cid, parents, subscribenode) 
				values(%d, '%s', %d)";		
  	    db_query($sql, $comment['cid'], $parents, $comment['commentsubscribenode']);
			}
			else  {
				$sql = "insert into {z_commentsubscribe} (cid,parents,subscribe) 
				values(%d, '%s', %d)";		
  	    db_query($sql, $comment['cid'], $parents, $comment['commentsubscribe']);
			}
       break;
    case 'delete':
			$sql = "DELETE FROM {z_commentsubscribe} WHERE cid = %d or 
			instr(parents, '%s,') ";		
			db_query($sql, $comment->cid,$comment->cid);
      break;
  }
}
/**
 * Implementation of hook_mail().
 */
function comment_subscribe_mail($key, &$message, $params) {
  switch ($key) {
    case 'mail_author':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
    case 'mail_user':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }    
}

/**
 *Function to send mail to subscribed users if any comment is submitted
 */
function _comment_subscribe_mailalert( $comment) {
  global $base_url;
  $nid = $comment->nid;
  $cid = $comment->cid;
  $commname= $comment->name;
  $commtext= $comment->comment;
  $commsubj= $comment->subject;
  //Get the parents and mailid of a particular comment
  $parentrslt = db_fetch_object(db_query("SELECT parents, 
  IF(length(c.mail)<1, ifnull(u.mail,u.init),
  c.mail) mail FROM {z_commentsubscribe} zc 
  LEFT JOIN {comments} c on zc.cid = c.cid
  LEFT JOIN {users} u on u.uid = c.uid
  WHERE zc.cid = %d", $cid));
  if($parentrslt->parents != NULL) {
  	$arrparents =explode(',',$parentrslt->parents);
    $parents .= $arrparents[0];
    for($i = 1; $i< count($arrparents)-1 ; $i++) {
      $parents .=',';
      $parents .= $arrparents[$i];
    }
    $currmailid = $parentrslt->mail;
    $node = node_load($nid);
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    //Get the mailid of users who subscribed for the comment replies
    //or node comments.
    if ( $GLOBALS['db_type']=='pgsql') {
      $result = db_query(
             "SELECT DISTINCT c.cid,u.init,c.uid,c.name,c.nid, ".
             "  (case when length(c.mail)<1 then coalesce (u.mail,u.init) else c.mail end) AS mail ".
             " FROM {comments} c LEFT OUTER JOIN {users} u ON u.uid=c.uid ".
           " LEFT JOIN {z_commentsubscribe} zc on zc.cid=c.cid ".
             " WHERE nid=%d  AND ((zc.cid IN (%s) AND subscribe=1) OR subscribenode=1 ) AND c.status=0 ".
             "  AND LENGTH(case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end)>1 ".
             "  AND (case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end) like '%@%.%' ".
             "  AND (case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end) <> '%s' ".
             " GROUP BY 1,2,3,4,5,6  ORDER BY mail DESC",
        $nid, $parents, $currmailid
           ); 
    }
    else  {
      $result = db_query('SELECT DISTINCT c.cid,u.init,c.uid,c.name,c.nid,  
        IF(length(c.mail)<1, ifNULL(u.mail,u.init), c.mail) mail
        FROM {comments} c LEFT OUTER JOIN {users} u ON u.uid=c.uid
        LEFT JOIN {z_commentsubscribe} zc on zc.cid=c.cid 
        WHERE nid=%d  AND ((zc.cid IN (%s) AND subscribe=1) OR subscribenode=1 )AND c.status=0
        AND LENGTH(IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail))>1 
        AND IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) like 
        \'%@%.%\'
        AND IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) <> \'%s\'
        GROUP BY IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) ORDER 
        BY mail DESC',
        $nid, $parents, $currmailid
      );
    }
    $count=0;
    while ($alert = db_fetch_object($result)) {	
  	  $mailid = $alert->mail;
  	  $subject = t('!site :: new comment for your post.', array(
  	  '!site' => variable_get('site_name', 'drupal')));
  	  $message = t((variable_get('comment_subscribe_default_mailtext',
  	  DEFAULT_MAILTEXT)),
      array(
  		  '!commname' => $commname,
  		  '!commtext' => $commtext,
  		  '!commsubj' => $commsubj,
  		  '!comment_url' => url('node/'.$nid,array('absolute' => TRUE))."#comment-".
  			$cid,
  		  '!node_title' =>  $node->title,
  		  '!node_teaser' => $node->teaser, 
  		  '!mission' => variable_get('site_mission', ''), 
  		  '!node_body' =>  $node->body, 
  		  '!name' => $alert->name, 
  		  '!site' => variable_get('site_name', 'drupal'), 
  		  '!uri' => $base_url, 
  		  '!uri_brief' => substr($base_url, strlen('http://')), 
  		  '!date' => format_date(time()), 
  		  '!login_uri' => url('user', array('absolute' => TRUE)), 
  		  '!edit_uri' => url('user/'. $alert->uid .'/edit', array('absolute' => TRUE)
  				),
  		  '!link1' => url('comment_subscribe/disable/nodepost/'.$nid.'/'.
  			md5($mailid), array('absolute' => TRUE)),
  		  '!link2' => url('comment_subscribe/disable/postrply/'.$alert->
  			cid.'/'.md5($mailid), array('absolute' => TRUE)),
  		  )
  		);
  		$_SESSION['subject'] = $subject;
  		$_SESSION['message'] = $message;
        drupal_mail( "comment_subscribe", 
                     'mail_user', 
                     $alert->mail, 
                     language_default(), 
                     array ( 'body' => $message, 
                             'subject' => $subject,
                             'header' => $header,
                           ));
                       
  		$count++;
  		if (($alert->uid)!=0) 
  			$mylink =l( $mailid , 'user/'. $alert->uid .'/edit') ;
  		else
  			$mylink =$mailid;
  		// Add an entry to the watchdog log.
  		watchdog('comment_subscribe', 'Subscribe !link', array('!link' => $mylink),
  		  				WATCHDOG_NOTICE, l(t('source comment'), 'node/'. $nid, array('fragment' => 'comment-'. $alert->cid)));
  		// revert to previous (site default) locale
  		$locale = $initial_locale;
    }
    //Sending mail to author of the post, if he subscribed comments to the node
    if ( $GLOBALS['db_type']=='pgsql') {
      $authorid = db_result(db_query("SELECT  coalesce ( u.mail, u.init )
      mail FROM {users} u LEFT JOIN {node} n ON u.uid = n.uid 
      LEFT JOIN {z_nodesubscribe} z ON z.nid = n.nid 
      WHERE n.nid = %d AND z.nodesubscribe=1 AND mail <> '%s' ", $nid, $currmailid));
    }
    else {
      $authorid = db_result(db_query("SELECT  ifNULL(u.mail,u.init)
      mail FROM {users} u LEFT JOIN {node} n ON u.uid = n.uid 
      LEFT JOIN {z_nodesubscribe} z ON z.nid = n.nid 
      WHERE n.nid = %d AND z.nodesubscribe=1 AND mail <> '%s'", $nid, $currmailid));
    }
    $subject = t('!site :: new comment for your post.', array(
        '!site' => variable_get('site_name', 'drupal')));
    $message = t((variable_get('comment_subscribe_default_author_mailtext',
      DEFAULT_AUTHOR_MAILTEXT)),
      array(
        '!commname' => $commname,
  		'!comment_url' => url('node/'.$nid,array('absolute' => TRUE))."#comment-".
  			$cid,
        '!node_title' =>  $node->title,
        '!mission' => variable_get('site_mission', ''), 
        '!name' => $alert->name, 
        '!site' => variable_get('site_name', 'drupal'), 
        '!uri' => $base_url, 
        '!link1' => url('comment_subscribe/disable/nodecomments/'. $nid,array('absolute' => TRUE)),
        )
      );    
    $headers = array(); 
    drupal_mail( "comment_subscribe", 'mail_author', $authorid, language_default(), array ( 'body' => $message, 
                             'subject' => $subject,
                             'header' => $header,
                           ));

    if( $count > 0 )
      drupal_set_message(t("Thanks for your comment! I just sent out %count follow-up mail notifications!", array("%count" => $count)));
  }
}
/**
 * Function to unsubscribe the mail
 */
function comment_subscribe_page() {
  global $user;
  $breadcrumb = NULL;
  $op = $_POST["op"];
  $edit = $_POST["edit"];
	$page_content=" ";
  if (empty($op)) {
    $op = arg(1);
  }
  $arg = arg(3);
  switch ($op) {
    case 'disable':
      //Disable followup comments for a particular node by author
      $type = arg(2);
      $key=$arg;
      if ( strcmp($type, 'nodecomments') == 0 ) {
        db_query("UPDATE {z_nodesubscribe} z 
          SET z.nodesubscribe = 0
          WHERE z.nid = %d ", $arg);
        drupal_set_message(t("Your comment follow up subscription for 
        this node was disabled. Thanks"));
        $title = t('Disabled comment follow up subscription feature
        for this node');
      }
      //Disable followup comments for a particular node
      else if ( strcmp($type, 'nodepost') == 0 ) {
        if ( $GLOBALS['db_type']=='pgsql') {
          db_query("
          UPDATE {z_commentsubscribe} cs set subscribe=0 , subscribenode = 0 
          WHERE cs.cid in (SELECT c.cid from {comments} c inner join {users} u on c.uid=u.uid and c.nid= %d 
          AND md5(case when length(c.mail)<1 then u.mail else c.mail end) = '%s')", $arg, arg(4));
        }
        else {
          db_query("UPDATE {comments} c , {users} u ,
          {z_commentsubscribe} cs
          SET cs.subscribe = 0, cs.subscribenode = 0 
          WHERE c.cid=cs.cid AND c.uid = u.uid
          AND c.nid = %d AND md5(IF( LENGTH( c.mail ) <1, u.mail,
          c.mail ) ) = '%s'", $arg, arg(4));
        }
        drupal_set_message(t("Your comment follow up subscription for this node was disabled. Thanks"));
        $title = t('Disabled comment follow up subscription feature for this node');
      }
      //Disable followup comments for a particular comment
      else {
        //Get the maximum cid for a particular comment of a givenid
         if ( $GLOBALS['db_type']=='pgsql') {
           $lstcid = db_fetch_object(db_query("
           SELECT max(zc.cid) as maxcid FROM {z_commentsubscribe} zc 
            LEFT JOIN {comments} c on c.cid = zc.cid 
             LEFT OUTER JOIN {users} u ON u.uid=c.uid
            WHERE subscribe = 1 AND parents ~ '%s,' 
            AND md5(case when LENGTH( c.mail ) <1 then  u.mail else c.mail end ) = '%s'", $arg, arg(4)));
        }
        else {
          //Get the maximum cid for a particular comment of a givenid
          $lstcid = db_fetch_object(db_query("SELECT max(zc.cid) as 
            maxcid FROM {z_commentsubscribe} zc 
            LEFT JOIN {comments} c on c.cid = zc.cid 
             LEFT OUTER JOIN {users} u ON u.uid=c.uid
             WHERE subscribe = 1 AND instr(parents ,'%s') AND md5(IF( 
            LENGTH( c.mail ) <1, u.mail, c.mail ) ) = '%s'", $arg, arg(4)));
    }
    if ( $lstcid->maxcid )
      $cid =  $lstcid->maxcid;
    else
      $cid = $arg;
    db_query("UPDATE {comments} c , {users} u , {z_commentsubscribe} cs SET cs.subscribe = 0,  cs.subscribenode = 0  WHERE c.cid=cs.cid AND u.uid=c.uid
      AND  c.cid = %d AND md5(IF( LENGTH( c.mail ) <1, u.mail, c.mail ) ) = '%s' ", $cid, arg(4));
    drupal_set_message(t("Your comment follow up subscription for this post was disabled. Thanks"));
    $title = t('Disabled comment follow up subscription feature  for this comment');
      }
    break;
    default;
      $title = t('Comment Subscribe');
      break;
  }
  drupal_set_title($title);
  drupal_set_breadcrumb($breadcrumb);
  print theme("page", $page_content);
}
/*
 * Function hook_enable
 */
function comment_subscribe_enable() {
  
  $num_rows_result = db_fetch_object(db_query("SELECT count(*) AS num FROM {comments} c"));
  
  if (  $num_rows_result-> num != 0 ) {
    //If comment_subscribe module is enabled in a live site.
    //For previous comments an entry in z_commentsubscribe is 
    //generated using the below code.
    $level = 1;
    $ifcondition = "if(c". $level .".pid <> 0, concat(c". $level .".pid, ','),'')";
    $table = "c". $level;
    $join =NULL;
    
    //First find the level of comments
    do {
     
     if ($level != 1) {
       $prvlevel = $level - 1;
       $join .= " join {comments} c". $level ." on c". $prvlevel .".pid=c". $level .".cid";
     }
     $sql = "SELECT c1.cid, concat('0,', ". $ifcondition ." ) AS parents FROM {comments} c1  ". $join;
     $result = db_fetch_array(db_query($sql));
     if ( $result != NULL ) {
       $origsql = $sql;
       $origjoin = $join;
       $origifcond = $ifcondition;
     }
     $level++;
     $table = "c" . $level;
     $ifcondition = " if(c". $level ." .pid <> 0, concat(c". $level ." . pid, ','),''),". $ifcondition;
    }while ( $result != NULL );
    $sql = str_replace('join', 'left join', $origsql);
    $sql = str_replace('AS parents', 'AS parents, 0 as subscribe, 0 as subscribenode', $sql);
    $sql = "INSERT INTO {z_commentsubscribe} (cid, parents, subscribe, subscribenode) ". $sql ."
    left join {z_commentsubscribe} cs on c1.cid = cs.cid where cs.subscribe is NULL";
    db_query($sql);
    //Insert previous node informations in to the z_nodesubscribe table.
    db_query("INSERT INTO z_nodesubscribe (nid, uid) select nid,uid from node");
  }
 }
