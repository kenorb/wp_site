<?php
// $Id: comment_mover.module,v 1.22.2.5.2.1 2008/12/25 20:41:26 heine Exp $

define ('COMMENT_MOVER_NODE_TO_COMMENT', 1);
define ('COMMENT_MOVER_COMMENT_TO_NODE', 2);
define ('COMMENT_MOVER_COMMENT_TO_COMMENT', 3);
define ('COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD', 4);

/**
 * Implementation of hook_help
 */
function comment_mover_help($path, $arg) {
  switch ($path) {
    case 'admin/help#comment_mover':
      $output = '<p>'. t('Comment mover enables you to move comments and nodes around by pruning and grafting. Pruning and grafting are similar to cut and paste but operate on branches, not on single comments. If you prune and graft a comment thread, the entire thread will be moved, not just the pruned comment.') .'</p>';
      $output .= '<p>'. t('Basic use is simple; it starts by pruning a node or comment via the link prune. The pruned node/comment now appears in the Graft block. The graft block shows the title and author of the pruned content and always allows you to cancel the action. You can now navigate through your site and choose one of two options: grafting or conversion.') .'</p>';
      $output .= '<p>'. t('Grafting is a simple matter: simply click the graft link on the content (comment or node) you want the pruned object to reside under. All childcomments will be moved together with the pruned node or comment') .'</p>';

      $output .= '<p>'. t('If you just pruned a comment and enabled story and page under "Enable promotion to the following node types" on the <a href="@url">comment mover settings page</a>, the graft block also shows you story and page in the selection of node types to which the
comment can be converted. When you then, for example, select story and click convert, a story submission form will appear with prefilled fields. Edit if necessary, then click submit. A new story node will be created. All children of the original comment will be moved to the new node.', array('@url' => url('admin/settings/comment_mover'))) .'</p>';
      $output .= '<p>'. t('When you move a comment to another node or convert it to a node, the original comment will contain a link pointing to the comments new location. When you move a node to become a comment on another node, the original node will contain a redirect to the new location.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu
 */
function comment_mover_menu() {
  $items = array();

  $items['comment/cancel'] = array(
    'title' => 'Cancel pruning',
    'page callback' => 'comment_mover_cancel',
    'page arguments' => array(),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK
  );

  $items['admin/settings/comment_mover'] = array(
    'title' => 'Comment mover',
    'description' => 'Configure comment mover to operate on specific content types.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_mover_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  $items['comment/promote'] = array(
    'title' => 'Promote comment',
    'page callback' => 'comment_mover_promote',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK,
  );

  $items['comment/graft/%node'] = array(
    'title' => 'Graft comment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('confirm_comment_mover_graft', 2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK,
  );

  $items['comment/prune'] = array(
    'title' => 'Graft comment',
    'page callback' => 'comment_mover_prune',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implementation of hook_link
 */
function comment_mover_link($type, $object = 0, $teaser = FALSE) {
  $links = array();

  if ($type == 'comment' && user_access('administer comments')) {
    $prune = comment_mover_pruning();
    if ($prune) {
                                                                   // Display graft link when
      if (comment_mover_allows_grafting('comment', $object) &&     // grafting is allowed on the node type
          $prune->cid != $object->cid &&                           // comment is not the pruned comment
          !($prune->nid == $object->nid && $prune->cid == 0) &&    // comment is not a child of the pruned node
          !in_array($object->cid, comment_mover_get_children($prune->cid))) { // comment is not a child of the pruned comment

        $links['comment_mover_comment_graft'] = array(
          'title' => t('graft'),
          'href' => "comment/graft/{$object->nid}/{$object->cid}",
          'query' => drupal_get_destination(),
        );
      }
    }
    else if (comment_mover_allows_pruning('comment', $object)) {
      $links['comment_mover_comment_prune'] = array(
        'title' => t('prune'),
        'href' => "comment/prune/{$object->nid}/{$object->cid}",
        'query' => drupal_get_destination(),
      );
    }
  }
  else if ($type == 'node' && !$teaser && user_access('administer comments')) {
    $prune = comment_mover_pruning();
    if ($prune) {
                                                                 // Display graft link when
      if (comment_mover_allows_grafting('node', $object) &&      // grafting on node_type is set
          !($prune->nid == $object->nid && $prune->cid == 0) &&  // node is not the pruned node
          !($prune->nid == $object->nid && $prune->pid == 0)) {  // node is not the direct parent of pruned comment
        $links['comment_mover_node_graft'] = array(
          'title' => t('Graft'),
          'href' => "comment/graft/{$object->nid}",
          'query' => drupal_get_destination(),
        );
      }
    }
    else if (node_access('update', $object) && user_access('administer comments') && comment_mover_allows_pruning('node', $object)) {
      $links['comment_mover_node_prune'] = array(
        'title' => t('Prune'),
        'href' => "comment/prune/{$object->nid}",
        'query' => drupal_get_destination(),
      );
    }
  }
  return $links;
}


/**
 * Displays node type select in block
 *
 */
function comment_mover_promote_form($form_state) {
  $form = array();
  $options = array();
  foreach (node_get_types() as $node_type) {
    $type = $node_type->type;
    $name = $node_type->name;
    if (node_access('create', $type) && variable_get("commentmover_promotion_$type", FALSE)) {
      $options[$type] = $name;
    }
  }
  if (!empty($options)) {
    $form['type'] = array(
      '#type' => 'select',
      '#title' => t('Convert to'),
      '#default_value' => 'forum',
      '#options' => $options,
    );
    $form['submit'] = array('#type' => 'submit', '#value' => t('Convert'));
  }
  return $form;
}
// TODO: Replace with multistep?
function comment_mover_promote_form_submit($form, &$form_state) {
  $form_state['redirect'] = "comment/promote/{$form_state['values']['type']}" ;
}


/**
 * Menu callback, directs to a node submission form of $type.
 */
function comment_mover_promote($type) {
  global $user;
  if (array_key_exists($type, node_get_types()) && node_access('create', $type) && variable_get("commentmover_promotion_$type", FALSE)) {
    $prune = comment_mover_pruning();
    if ($prune->nid && $prune->cid && user_access('administer comments') && comment_mover_allows_pruning('comment', $prune)) {
      $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data, n.title AS node_title FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d', $prune->cid));

      $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
      $node = array(
        'uid' => $comment->uid,
        'name' => $comment->uid ? $comment->name : '',
        'type' => $type,
        'body' => $comment->comment,
        'title' => $comment->subject,
        'created' => $comment->timestamp,
        'comment_mover' => TRUE,
        'comment_mover_status' => $comment->status,
      );

      // Preselect the parent's taxonomy terms when promoting to the same node type.
      $parent_node = node_load($prune->nid);
      if ($type == $parent_node->type) {
        $node['taxonomy'] = $parent_node->taxonomy;
      }

      // Check whether the current user has access to the comment->format.
      // If not, don't do anything; the default filter will be used.
      if (filter_access($comment->format)) {
        $node['format'] = $comment->format;
      }

      // Set name & warn the user when converting an anonymous comment to a blog post.
      if ($type == 'blog' && $comment->uid == 0) {
        $node['name'] = $user->name;
        drupal_set_message(t('Author has been set to %username.', array('%username' => theme('username', $user))));
      }

      //$output = node_form($node);
      module_load_include('pages.inc', 'node');
      $output = drupal_get_form($type .'_node_form', $node);
      drupal_set_title(t('Submit %name', array('%name' => node_get_types('name', $node))));
      return $output;
    }
  }
}

/**
 * Modify the node submission form to enable comment mover to do it's job in hook_nodeapi.
 */
function comment_mover_form_alter(&$form) {
  if ($form['#id'] == 'node-form' && isset($form['#node']->comment_mover)) {
    $form['comment_mover'] = array('#type' => 'value', '#value' => TRUE);
    // Set the default publishing status to the comment status.
    // This will only work for users with the administer nodes privilege.
    // The status will be set in hook_nodeapi for other users.
    if (isset($form['options']['status'])) {
      // Set the node status (published: 1, unpublished: 0) to comment status (published: 0, unpublished: 1).
      $form['options']['status']['#default_value'] = !$form['#node']->comment_mover_status;
    }
    else {
      $form['comment_mover_status'] = array('#type' => 'value', '#value' => $form['#node']->comment_mover_status);
    }
    // Correct the date field; node_form_array only sets the date if the node already has a nid.

    // Correct the data field; node_form_array only sets the date if the node already has a nid.
    if (user_access('administer nodes')) {
      $form['author']['date']['#default_value'] = $form['#node']->date;
    }
  }
}

function comment_mover_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($op == 'insert' && isset($node->comment_mover) && $node->comment_mover == TRUE) {
    $prune = comment_mover_pruning();
    $comment = db_fetch_array(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data, n.title AS node_title FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d', $prune->cid));
    $comment['comment_mover'] = COMMENT_MOVER_COMMENT_TO_NODE;
    $comment['new_nid'] = $node->nid;
    comment_mover_move($comment);
    comment_mover_unset();
  }
  else if ($op == 'presave' && isset($node->comment_mover_status)) {
    // Set the node status (published: 1, unpublished: 0) to comment status (published: 0, unpublished: 1) for
    // users without the administer nodes permission.
    $node->status = !$node->comment_mover_status;
  }
}

/**
 * Post the comments, children and updates the statistcis of both nodes.
 *
 */
function comment_mover_comment_post($edit) {
  global $user;

  if (user_access('administer comments')) {
    if ($edit['cid'] && empty($edit['comment_mover_multiple'])) {
      $thread = comment_mover_build_thread($edit);

      db_query("UPDATE {comments} SET subject = '%s', comment = '%s', pid = %d, format = '%s', thread = '%s' WHERE cid = %d", $edit['subject'], $edit['comment'], $edit['pid'], $edit['format'], $thread, $edit['cid']);

      _comment_update_node_statistics($edit['nid']);

      // Allow modules to respond to the updating of a comment.
      module_invoke_all('comment', 'update', $edit);

      // Add an entry to the watchdog log.
      watchdog('content', 'Comment: updated %subject.', array('%subject' => theme('placeholder', $edit['subject'])), WATCHDOG_NOTICE, l(t('view'), 'node/'. $edit['nid'], array('fragment' => 'comment-'. $edit['cid'])));
    }
    else if ($edit['cid'] && !empty($edit['comment_mover_multiple'])) {
      $thread = comment_mover_build_thread($edit);

      db_query("UPDATE {comments} SET pid = %d, nid = %d, thread = '%s' WHERE cid = %d", $edit['pid'], $edit['nid'], $thread, $edit['cid']);

      _comment_update_node_statistics($edit['nid']);
      _comment_update_node_statistics($edit['old_nid']);
      watchdog('content', 'Comment: moved %subject.', array('%subject' => theme('placeholder', $edit['subject'])), WATCHDOG_NOTICE, l(t('view'), 'node/'. $edit['nid'], array('fragment' => 'comment-'. $edit['cid'])));
    }
    else {
      // Add the comment to database.
      $status = isset($edit['status']) ? $edit['status'] : 0;

      $edit['timestamp'] = isset($edit['timestamp']) ? $edit['timestamp'] : time();

      if ($edit['uid'] == $user->uid) {
        $edit['name'] = $user->name;
      }
      else {
        $account = user_load(array('uid' => $edit['uid']));
        $edit['name'] = $account->name;
      }

      $thread = comment_mover_build_thread($edit);

      db_query("INSERT INTO {comments} (nid, pid, uid, subject, comment, format, hostname, timestamp, status, thread, name, mail, homepage) VALUES (%d, %d, %d, '%s', '%s', %d, '%s', %d, %d, '%s', '%s', '%s', '%s')", $edit['nid'], $edit['pid'], $edit['uid'], $edit['subject'], $edit['comment'], $edit['format'], ip_address(), $edit['timestamp'], $status, $thread, $edit['name'], $edit['mail'], $edit['homepage']);
      $edit['cid'] = db_last_insert_id('comments', 'cid');

      _comment_update_node_statistics($edit['nid']);

      // Tell the other modules a new comment has been submitted.
      module_invoke_all('comment', 'insert', $edit);

      // Add an entry to the watchdog log.
      watchdog('content', 'Comment: added %subject.', array('%subject' => $edit['subject']), l(t('view'), 'node/'. $edit['nid'], array('fragment' => 'comment-'. $edit['cid'])));
    }

    // Clear the cache so an anonymous user can see his comment being added.
    cache_clear_all();

    return $edit;
  }
}


/**
 * Returns a flat array of child cids
 *
 * @param array $cid
 * @return bool
 *
 */
function comment_mover_get_children($cid) {
  static $childlist;
  if (!isset($childlist)) {
    $childlist = array();
    $comment = comment_mover_load_comment($cid);
    $thread = comment_mover_get_thread((array)$comment);
    foreach ($thread as $depth => $children) {
      foreach ($children as $child) {
        $childlist[] = $child['cid'];
      }
    }
  }
  return $childlist;
}

/**
 * Determines whether $cid is among comments in $thread
 */
function comment_mover_target_is_child($cid, $thread) {
  if ($cid) {
    // Check whether the intended target is a child of the object
    foreach ($thread as $depth => $children) {
       foreach ($children as $child) {
        if ($child['cid'] == $cid) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Make a copy of a comment or node and save node/ comment with new body.
 * Move children of node or comment along.
 *
 * $object (array) the comment or node
 * $pid (integer) parent id, default 0
 * $nid (integer) node id, needed in case pid = 0
 */
function comment_mover_move($object, $pid = 0, $nid = 0) {

  switch ($object['comment_mover']) {
    case COMMENT_MOVER_COMMENT_TO_COMMENT:
    case COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD:
      $comment = $object;
      $comment['pid'] = $pid;
      if ($object['comment_mover'] == COMMENT_MOVER_COMMENT_TO_COMMENT) {
        $comment['cid'] = FALSE;
      }
      break;
    case COMMENT_MOVER_COMMENT_TO_NODE:
      $new_nid = $object['new_nid'];
      $comment = $object;
      $comment['comment'] = t('This comment has been moved <a href="@url">here</a>.', array('@url' => url("node/{$new_nid}")));
      break;
    case COMMENT_MOVER_NODE_TO_COMMENT:
      $comment = $object;
      $comment['comment'] = $object['body'];
      $comment['subject'] = $object['title'];
      // A published node has a status of 1, a published comment has a status of 0.
      $comment['status'] = !$object['status'];
      break;
  }

  $comment['nid'] = $nid ? $nid : $object['nid'];

  $thread = comment_mover_get_thread($object);

  if ($comment['comment_mover'] == COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD && comment_mover_target_is_child($pid, $thread)) {
    drupal_set_message(t('comment cannot be grafted on one of its children'));
    return 0;
  }

  $new_comment = comment_mover_comment_post($comment);
  foreach ($thread as $depth => $comments) {
    foreach ($comments as $c) {
      $c['old_nid'] = $c['nid'];
      $c['nid'] = isset($new_nid) ? $new_nid : $new_comment['nid'];
      $c['pid'] = ($depth == 1) ? (isset($new_nid) ? 0 : $new_comment['cid']) : $c['pid'];
      $c['comment_mover_multiple'] = 1;
      comment_mover_comment_post($c);
    }
  }

  switch ($object['comment_mover']) {
    case COMMENT_MOVER_COMMENT_TO_COMMENT:
      // If we moved the comment to another node, add a redirector.
      $object['comment'] = t('This comment has been moved <a href="@url">here</a>.', array('@url' => url("node/{$nid}", array('fragment' => "comment-{$new_comment['cid']}"))));
      comment_mover_comment_post($object);
      break;
    case COMMENT_MOVER_NODE_TO_COMMENT:
      $object['body'] = t('This comment has been moved <a href="@url">here</a>.', array('@url' => url("node/{$comment['nid']}", array('fragment' => "comment-{$new_comment['cid']}"))));
      // for some reason this is needed.
      unset($object['0']);
      $object = (object) $object;
      node_save($object);
  }
  if (module_exists('oglist')) {
    switch ($object['comment_mover']) {
      case COMMENT_MOVER_NODE_TO_COMMENT:
        db_query('UPDATE {og2list_msgid} SET nid = %d, cid = %d WHERE nid = %d AND cid = 0', $new_comment['nid'], $new_comment['cid'], $object['nid']);
        break;
      case COMMENT_MOVER_COMMENT_TO_NODE:
        db_query('UPDATE {og2list_msgid} SET nid = %d, cid = 0 WHERE nid = %d AND cid = %d', $nid, $object['new_nid'], $object['cid']);
        break;
      case COMMENT_MOVER_COMMENT_TO_COMMENT:
        db_query('UPDATE {og2list_msgid} SET nid = %d, cid = %d WHERE nid = %d AND cid = %d', $new_comment['nid'], $new_comment['cid'], $object['nid'], $object['cid']);
        break;
      case COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD:
        // Nothing to do
        break;
    }
  }

  return isset($new_nid)? $new_nid : $new_comment['cid'];
}

/**
 * Buids a thread for comments
 *
 * @TODO change for 4.7
 */
function comment_mover_build_thread($edit) {
  // Here we are building the thread field.  See the comment
  // in comment_render().
  if ($edit['pid'] == 0) {
    // This is a comment with no parent comment (depth 0): we start
    // by retrieving the maximum thread level.
    $max = db_result(db_query('SELECT MAX(thread) FROM {comments} WHERE nid = %d', $edit['nid']));

    // Strip the "/" from the end of the thread.
    $max = rtrim($max, '/');

    if (!$max) {
       $thread = int2vancode(0) .'/';
    }
    else {
       $thread = int2vancode(vancode2int($max)+1) .'/';
    }
  }
  else {
    // This is comment with a parent comment: we increase
    // the part of the thread value at the proper depth.

    // Get the parent comment:
    $parent = db_fetch_object(db_query('SELECT * FROM {comments} WHERE cid = %d', $edit['pid']));

    // Strip the "/" from the end of the parent thread.
    $parent->thread = (string) rtrim((string) $parent->thread, '/');

    // Get the max value in _this_ thread.
    $max = db_result(db_query("SELECT MAX(thread) FROM {comments} WHERE thread LIKE '%s.%%' AND nid = %d", $parent->thread, $edit['nid']));

    if ($max == '') {
      // First child of this parent.
      $thread = $parent->thread .'.00/';
    }
    else {
      // Strip the "/" at the end of the thread.
      $max = rtrim($max, '/');

      // We need to get the value at the correct depth.
      $parts = explode('.', $max);
      $parent_depth = count(explode('.', $parent->thread));
      $last = $parts[$parent_depth];

      $thread = $parent->thread .'.'. int2vancode(vancode2int($last) + 1) .'/';
    }
  }

  return $thread;
}

/**
 * Get a all children of a given comment (recursivly)
 * or all comments if a node
 */
function comment_mover_get_thread($parent) {
  if (isset($parent['cid'])) {
    $query = "SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name , c.mail, c.homepage, u.uid, u.name AS registered_name, u.picture, u.data, c.thread FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d AND SUBSTRING(c.thread, 1, LENGTH('%s')) = '%s' AND c.cid <> %d ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))";

    $depth = substr_count($parent['thread'], '.');
    $thread = substr($parent['thread'], 0, strlen($parent['thread']) - 1);
    $result = db_query($query, $parent['nid'], $thread, $thread, $parent['cid']);
  }
  else {
    $query = "SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name , c.mail, c.homepage, u.uid, u.name AS registered_name, u.picture, u.data, c.thread FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))";
    $result = db_query($query, $parent['nid']);
    $depth = - 1;
  }

  $thread = array();
  while ($comment = db_fetch_array($result)) {
    $child_depth = substr_count($comment['thread'], '.') - $depth;
    $thread[$child_depth][] = $comment;
  }

  return $thread;
}

/**
 * Setup the session variable to hold the nid or cid to be pruned
 *
 * @param $nid
 *   The node id
 * @param $cid
 *   The comment id, if empty nid is the nid to be pruned
 *
 */
function comment_mover_prune($nid, $cid = 0) {
  if (comment_mover_pruning()) {
    // Already in pruning a post.
    drupal_goto();
  }
  if (is_numeric($cid) && is_numeric($nid)) {
    // Pruning a comment.
    $comment = comment_mover_load_comment($cid);
    if ($comment && comment_mover_allows_pruning('comment', $comment)) {
      $_SESSION['comment_mover']['cid'] = $cid;
      $_SESSION['comment_mover']['nid'] = $comment->nid;
      $_SESSION['comment_mover']['pid'] = $comment->pid;
      drupal_set_message(t('Pruning %title.', array('%title' => $comment->subject)));
      drupal_goto('node/'. $nid);
    }
  }
  else if (is_numeric($nid)) {
    // Pruning a node.
    $node = node_load($nid);
    if ($node && comment_mover_allows_pruning('node', $node)) {
      $_SESSION['comment_mover']['cid'] = 0;
      $_SESSION['comment_mover']['nid'] = $nid;
      $_SESSION['comment_mover']['pid'] = 0;
      drupal_set_message(t('Pruning %title.', array('%title' => $node->title)));
      drupal_goto('node/'. $nid);
    }
  }

  drupal_set_message(t('Unable to prune the post.'), 'error');
  drupal_goto();
}

function confirm_comment_mover_graft($form_state, $node, $cid = 0) {
  $form['target_node'] = array('#type' => 'value', '#value' => $node);

  if ($comment = _comment_load($cid)) {
    $form['target_cid'] = array('#type' => 'value', '#value' => $comment->cid);
  }
  else {
    $form['target_cid'] = array('#type' => 'value', '#value' => 0);
  }
  return confirm_form($form, t('Are you sure you want to move this post here?'), 'node/'. $node->nid);
}


/*
 * The grafting part, wrapper for comment_mover_move
 */
function confirm_comment_mover_graft_submit($form, &$form_state) {
  $target_node = $form_state['values']['target_node'];
  $target_cid = $form_state['values']['target_cid'];

  $prune = comment_mover_pruning();

  if (isset($target_node) && comment_mover_allows_grafting('node', $target_node)) {
    if ($prune->cid && user_access('administer comments') && comment_mover_allows_pruning('comment', $prune)) {
      // We're moving a comment
      $comment = db_fetch_array(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data, n.title AS node_title FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d', $prune->cid));
      if ($prune->nid == $target_node->nid) {
        // Moving to the same thread
        $comment['comment_mover'] = COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD;
        $new_cid = comment_mover_move($comment, $target_cid, $target_node->nid);
        drupal_set_message(t('Grafted %title.', array('%title' => $comment['subject'])));
        if ($new_cid) {
          comment_mover_unset();
          $form_state['redirect'] = "node/{$target_node->nid}";
          return;
        }
        $form_state['redirect'] = array('node/'. $target_node->nid, NULL, "comment-{$new_cid}");
        return;
      }
      else {
        // Moving to another node
        // First step (move to node)
        $comment['comment_mover'] = COMMENT_MOVER_COMMENT_TO_COMMENT;
        $new_cid = comment_mover_move($comment, 0, $target_node->nid);
        // Second step (move to position) if indeed a cid was given
        if ($target_cid) {
          $comment = db_fetch_array(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data, n.title AS node_title FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d', $new_cid));
          $comment['comment_mover'] = COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD;
          $new_cid = comment_mover_move($comment, $target_cid, $target_node->nid);
        }
        drupal_set_message(t('Grafted %title.', array('%title' => $comment['subject'])));
        comment_mover_unset();
        $form_state['redirect'] = array("node/{$target_node->nid}", NULL, "comment-{$new_cid}");
        return;
      }
    }
    else if ($prune->nid && user_access('administer comments')) {
      // We're moving a node here
      // First step - move to node as comment
      $old_node = node_load($prune->nid);
      if (node_access('update', $old_node) && comment_mover_allows_pruning('node', $old_node)) {
        $old_node->comment_mover = COMMENT_MOVER_NODE_TO_COMMENT;
        $new_cid = comment_mover_move((array) $old_node, 0, $target_node->nid);
        // Second step - move to position - if indeed a cid was given
        if ($target_cid) {
          $comment = db_fetch_array(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data, n.title AS node_title FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {node} n ON c.nid = n.nid WHERE c.cid = %d', $new_cid));
          $comment['comment_mover'] = COMMENT_MOVER_COMMENT_TO_COMMENT_SAME_THREAD;
          $new_cid = comment_mover_move($comment, $target_cid, $target_node->nid);
        }
      }
      drupal_set_message(t('Grafted %title.', array('%title' => $old_node->title)));
      comment_mover_unset();
      $form_state['redirect'] = array("node/{$target_node->nid}", NULL, "comment-{$new_cid}");
      return;
    }
  }

  drupal_set_message(t('Unable to move the post.'), 'warning');

}


function comment_mover_load_comment($cid) {
  $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));
  if ($comment) {
    $comment = $comment;
    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
    return $comment;
  }
  return FALSE;
}

function comment_mover_cancel() {
  comment_mover_unset();
  drupal_goto();
}

function comment_mover_unset() {
  unset($_SESSION['comment_mover']['cid']);
  unset($_SESSION['comment_mover']['nid']);
  unset($_SESSION['comment_mover']['pid']);
  unset($_SESSION['comment_mover']);
}

/**
 * Returns false when not in 'pruning' mode or an object with cid, pid and nid when pruning
 *
 * obj->nid the nid
 * obj->cid the comment being moved, if 0, obj->nid is moved
 * obj->pid the comment 'level, used in hook_link
 */
function comment_mover_pruning() {
  if (isset($_SESSION['comment_mover'])) {
    $obj = '';
    $obj->cid = isset($_SESSION['comment_mover']['cid']) ? $_SESSION['comment_mover']['cid'] : FALSE;
    $obj->nid = isset($_SESSION['comment_mover']['nid']) ? $_SESSION['comment_mover']['nid'] : FALSE;
    $obj->pid = isset($_SESSION['comment_mover']['pid']) ? $_SESSION['comment_mover']['pid'] : FALSE;
    return $obj;
  }
 return FALSE;
}

/**
 * Implementation of hook_block; the clipboard
 *
 */
function comment_mover_block($op = 'list', $delta = 0, $edit = array()) {
  $block = array();
  switch ($op) {

    case 'list':
      $blocks = array();
      $block[0]= array('info' => t('Comment mover clipboard'));
      break;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('Graft');
        $block['content'] = '';
        $prune = comment_mover_pruning();
        if ($prune) {
          if ($prune->cid) {
            $comment = comment_mover_load_comment($prune->cid);
            $block['content'] = theme('comment_mover_block', 'comment', $comment);
          }
          else {
            $node = node_load($prune->nid);
            $block['content'] = theme('comment_mover_block', 'node', $node);
          }
        }
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_theme().
 */
function comment_mover_theme() {
  return array(
    'comment_mover_block' => array(
      'arguments' => array('op' => NULL, 'object' => NULL),
    ),
  );
}

/**
 * Theme comment mover block
 *
 * @param $op
 *   indicates the type of $object. Possible values, comment, node.
 * @param $object
 *   the node or comment object
 *
 * @return the content of the block
 */
function theme_comment_mover_block($op, $object) {
  $content = '';
  if ($op == 'comment') {
    $content = '<h3>'. check_plain($object->subject) .'</h3>';
    $content .= t('By !author @date', array('!author' => theme('username', $object), '@date' => format_date($object->timestamp, 'small')));
    $items[] = l(t('cancel'), 'comment/cancel', array('query' => drupal_get_destination()));
    $content .= drupal_get_form('comment_mover_promote_form');
    $content .= theme('item_list', $items);
  }
  else {
    $content = '<h3>'. check_plain($object->title) .'</h3>';
    $content .= t('By !author @date', array('!author' => theme('username', $object), '@date' => format_date($object->created, 'small')));
    $items[] = l(t('cancel'), 'comment/cancel', array('query' => drupal_get_destination()));
    $content .= theme('item_list', $items);
  }
  return $content;
}

/**
 * Checks the settings whether the particular node type allows pruning of the node / or comments of the node
 *
 * @param $op
 *   determines the type of $object [node, comment]
 * @param $object
 *   the node / nid or comment object
 */
function comment_mover_allows_pruning($op, $object) {
  if ($op == 'node') {
    return variable_get("commentmover_node_{$object->type}", FALSE);
  }
  else if ($op == 'comment') {
    $node = node_load($object->nid);
    return (variable_get("commentmover_prune_{$node->type}", FALSE) && $node->comment == 2);
  }
}

/**
 * Checks the settings whether the node / comment allows grafting (depends on the type of the node/parent node)
 *
 * @param $op
 *   determines the type of $object [node, comment]
 * @param $object
 *   the node or comment object
 */
function comment_mover_allows_grafting($op, $object) {
  if ($op == 'node') {
    return variable_get("commentmover_graft_{$object->type}", FALSE);
  }
  else if ($op == 'comment') {
    $node = node_load($object->nid);
    return (variable_get("commentmover_graft_{$node->type}", FALSE) && $node->comment == 2);
  }
}


//TODO: Rework hook_settings to the new Drupal 5 settings and 'admin/settings' hook_menu entry.
/**
 *   - What node types can be pruned
 *   - What node types allow pruning (note: this refers to comments on the node)
 *   - What node types allow grafting
 */
function comment_mover_settings($form_state) {

  $form = array();

  // Create the fieldsets holding the checkboxes
  $form['allow_node_pruning'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable pruning of the following node types'),
    '#weight' => -8,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t("Define the node types that can be pruned. Note that pruning doesn't make sense for certain node types (poll, for example)."),
  );

  $form['allow_pruning'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable pruning of comments on the following node types'),
    '#weight' => -5,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Allow comments on these node types to be pruned and moved to other nodes or be promoted to a node.'),
  );

  $form['allow_grafting'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable grafting on the following node types'),
    '#weight' => -2,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These node types allow grafting of pruned nodes and comments.'),
  );

  $form['allow_promotion'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable promotion to the following node types'),
    '#weight' => -2,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t("Comments can be promoted to these nodetypes. Note that this doesn't make sense for certain node types (poll, for example)."),
  );

  // Generate the node type specific checkboxes per fieldset
  foreach (node_get_types('types') as $node_type) {
    $name = $node_type->name;
    $type = $node_type->type;
    $form['allow_node_pruning']["commentmover_node_$type"] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($name),
      '#default_value' => variable_get("commentmover_node_$type", FALSE),
    );
    $form['allow_pruning']["commentmover_prune_$type"] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($name),
      '#default_value' => variable_get("commentmover_prune_$type", FALSE),
    );
    $form['allow_grafting']["commentmover_graft_$type"] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($name),
      '#default_value' => variable_get("commentmover_graft_$type", FALSE),
    );
    $form['allow_promotion']["commentmover_promotion_$type"] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($name),
      '#default_value' => variable_get("commentmover_promotion_$type", FALSE),
    );
  }

  return system_settings_form($form);
}

/**
 * Respond to node type changes by updating associated settings.
 */
function comment_mover_node_type($op, $info) {
  switch ($op) {

    case 'delete':
      variable_del('commentmover_promotion_'. $info->type);
      variable_del('commentmover_graft_'. $info->type);
      variable_del('commentmover_prune_'. $info->type);
      variable_del('commentmover_node_'. $info->type);
      break;

      case 'update':
        if (!empty($info->old_type) && $info->old_type != $info->type) {
          variable_set('commentmover_promotion_'. $info->type, variable_get('commentmover_promotion_'. $info->old_type, FALSE));
          variable_del('commentmover_promotion_'. $info->old_type);

          variable_set('commentmover_graft_'. $info->type, variable_get('commentmover_graft_'. $info->old_type, FALSE));
          variable_del('commentmover_graft_'. $info->old_type);

          variable_set('commentmover_prune_'. $info->type, variable_get('commentmover_prune_'. $info->old_type, FALSE));
          variable_del('commentmover_prune_'. $info->old_type);

          variable_set('commentmover_node_'. $info->type, variable_get('commentmover_node_'. $info->old_type, FALSE));
          variable_del('commentmover_node_'. $info->old_type);
        }
      break;

  }
}