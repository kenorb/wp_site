<?php

//definition of constants and constant arrays

function ipaper_private_options() {
  return array('private' => t('Only this website'), 'public' => t('World - www.scribd.com'));
}
define ('DEFAULT_PRIVATE', 'private');

function ipaper_license_options() {
  return array(
    'ns' => t('Unspecified - no licensing information shown'),
    'by' => t('By attribution'),
    'by-nc' => t('By attribution, non-commercial'),
    'by-nc-nd' => t('By attribution, non-commercial, non-derivative'),
    'by-nc-sa' => t('By attribution, non-commercial, share like'),
    'by-nd' => t('By attribution, non-derivative'),
    'by-sa' => t('By attribution, share alike'),
    'pd' => t('Public domain'),
    'c' => t('Copyright - all rights reserved'),
  );
}
define ('DEFAULT_LICENSE', 'by-nc');

/**
 * Implementation of hook_help().
 */
function ipaper_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Allows you to embed iPaper objects hosted at scribd.com.');

    case 'node/add#ipaper':
      return t('Add a paper.');

   }
}

/**
 * Implementation of hook_perm().
 */
function ipaper_perm() {
  return array("create ipaper", "view ipapers", "embed ipapers", "download ipapers", "edit own ipapers", "edit ipapers", "delete own ipapers", "delete ipapers", "edit ipaper parameters"); 
}

/**
 * Implementation of hook_node_info().
 */
function ipaper_node_info() {
  return array('ipaper' => array(
    'name' => 'iPaper', 
    'description' => t('An iPaper is a document hosted on the scribd website.'),
    'module' => 'ipaper'));
}

/**
 * Implementation of hook_access().
 */
function ipaper_access($op, $node, $account) {
  
  switch ($op) {
    case 'create':
      return user_access('create ipaper');

    case 'view':
      return user_access('view ipapers');

    case 'update':
      if ($account->uid == $node->uid && user_access("edit own ipapers")) {
        return true;
      }
      else {
        return user_access("edit ipapers");
      }

    case 'delete':
      if ($account->uid == $node->uid && user_access("delete own ipapers")) {
        return true;
      }
      else {
        return user_access("delete ipapers");
      }

    default:
      return false;
  }
}

/**
 * Implementation of hook_form()
 * This function is called to retrieve the form that is displayed when one attempts 
 * to create/edit an ipaper
 */
function ipaper_form(&$node) {

  $type = node_get_types('type', 'ipaper');

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => $type->title_label,
    '#default_value' => $node->title,
    '#required' => TRUE, 
    '#weight' => -10,
  );

    $form['body'] = array(
      '#type' => $type->has_body ? 'textarea': 'hidden',
      '#title' => $type->body_label,
      '#default_value' => $node->body,
      '#description' => t('This text is displayed with your document.'),
      '#weight' => -5,
    );   

    $form['private'] = array(
      '#type' => variable_get('ipaper_choose_private', 1) ? 'select' : 'hidden',
      '#title' => t('Visibility'),
      '#options' => ipaper_private_options(),
      '#default_value' => ($node->private) ? $node->private : variable_get('ipaper_default_private', DEFAULT_PRIVATE),
      '#description' => t('Private documents are only available through this website. Public documents are also available on scribd.com and are indexed by search engines.'),
      '#weight' => -1,
    );

    $form['license'] = array(
      '#type' => variable_get('ipaper_choose_license', 1) ? 'select' : 'hidden',
      '#title' => t('License'),
      '#options' => ipaper_license_options(),
      '#default_value' => ($node->license) ? $node->license : variable_get('ipaper_default_license', DEFAULT_LICENSE),
      '#description' => t('The license under which the document is published. For more information about licenses, see <a href=http://creativecommons.org/about/licenses/meet-the-licenses target=_blank>http://creativecommons.org/</a>'),
      '#weight' => -1,
    );

//these parameters are to be shown and edited only by administrators unless you want your users to create ipapers by entering these parameters

if (user_access("edit ipaper parameters")) {

  $form['doc_id'] = array(
    '#type' => 'textfield',
    '#title' => t('doc_id'),
    '#default_value' => $node->doc_id,
    '#description' => t('Scribd document ID. Required unless you are attaching a file.'),
    '#required' => FALSE,
    '#weight' => 0,
  );

  $form['secret_password'] = array(
    '#type' => 'textfield',
    '#title' => t('secret_password'),
    '#default_value' => $node->secret_password,
    '#description' => t('Scribd secret password'),
    '#required' => FALSE,
    '#weight' => 0,
  );
  
  $form['access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('access_key'),
    '#default_value' => $node->access_key,
    '#description' => t('Scribd document access key. Required unless you are attaching a file.'),
    '#required' => FALSE,
    '#weight' => 0,
  );

  $form['fid'] = array(
    '#type' => 'hidden',
    //change type to textfield if you want to be able to edit this
    '#title' => t('fid'),
    '#default_value' => $node->fid,
    '#description' => t('Drupal upload file ID. This is updated automatically by the module to track which file was last uploaded to scribd.'),
    '#required' => FALSE,
    '#weight' => 0, 
  );
    
} //if(user_access...

  return $form;
}

/**
 * Implementation of hook_validate()
 */
function ipaper_validate($node) {

  //check to make sure that there are attachments
  $files = $node->files;
  if (!$files && !($node->doc_id && $node->access_key)) {
    form_set_error('files[upload]', t('You must upload an attachment to create an iPaper.'));
    return;
  }

  //also show a message if there is more than one attachment
  if (count($files)>1) {
    drupal_set_message(t('iPapers are created from a single document. The iPaper that is displayed will always be generated from your most recent upload.'), 'notice');
  }

} 

/**
 * Database hooks when loading, inserting, updating or deleting an ipaper
 */
 
function ipaper_load($node) {
  $paper = db_fetch_object(db_query('SELECT * FROM {ipaper} WHERE nid = %d', $node->nid));
  return $paper;
}

function ipaper_insert($node) {
  db_query("INSERT INTO {ipaper} (nid, fid, doc_id, secret_password, access_key, private, license) VALUES (%d, %d, %d, '%s', '%s', '%s', '%s')", $node->nid, $node->fid, $node->doc_id, $node->secret_password, $node->access_key, $node->private, $node->license);
  $_REQUEST['destination'] = "ipaper_transfer/$node->nid";
  //using drupal_goto would redirect before the node is saved
} 

function ipaper_update($node) {
  ipaper_dbupdate($node);
  $_REQUEST['destination'] = "ipaper_transfer/$node->nid";
} 

function ipaper_dbupdate($node) {
  //used when a node is saved/submitted in Drupal as well as when the scribd.com API returns keys.
  if(user_access('edit ipaper parameters')){
     _ipaper_dbupdate_params($node);
  }
  return db_query("UPDATE {ipaper} SET private = '%s', license = '%s' WHERE nid = %d", $node->private, $node->license, $node->nid);
} 

function _ipaper_dbupdate_params($node) {
  //used when when the scribd.com API returns keys.
  return db_query("UPDATE {ipaper} SET fid = %d, doc_id = %d, secret_password = '%s', access_key = '%s' WHERE nid = %d", $node->fid, $node->doc_id, $node->secret_password, $node->access_key, $node->nid);
}

function _ipaper_dbupdate_full_text($node) {
  //save full text for searching.
  return db_query("UPDATE {ipaper} SET full_text = '%s' WHERE nid = %d", $node->full_text, $node->nid);
}

function ipaper_delete($node) {
  db_query('DELETE FROM {ipaper} WHERE nid = %d', $node->nid);
  $scribd = ipaper_scribd_init();
  $result = $scribd->delete($node->doc_id);
  if (!$result) ipaper_report_error($scribd);
}

/**
 * Implementation of hook_menu()
*/
function ipaper_menu() {
  $items = array();
  
    $items['admin/settings/ipaper'] = array(
      'title' => t('iPaper module configuration'),
      'description' => t('iPaper API keys, configuration and QuickSwitch setup.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ipaper_config_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items['ipaper_transfer/%node'] = array(
      'title' => t('Please wait...'), 
      'access callback' => 'node_access',
      'access arguments' => array('edit', 1),
      'page callback' => 'ipaper_transfer',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    );
    $items['ipaper_upload/%node'] = array(
      'title' => t('Please wait...'), 
      'access callback' => 'node_access',
      'access arguments' => array('edit', 1),
      'page callback' => 'ipaper_upload',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    );
    $items['ipaper_download/%node'] = array(
      'title' => t('Redirecting...'), 
      'access callback' => 'user_access',
      'access arguments' => array('download ipapers'),
      'page callback' => 'ipaper_download',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Menu callback: ipaper_transfer 
 *  This function is called each time an ipaper node is created/updated and has the role of 
 * synchronizing the document on the scribd server with the Drupal node.
 *  Note that these operations happen at a menu callback page rather than in _update or _insert because:
 * 1. within _update and _insert the attachments have not been saved
 * 2. nodes should be saved regardless of whether the 'transfer' succeeds (a timeout or error for the
 *    API at scribd.com should not affect the node update
 * 3. it helps to display a progress bar while the file is transferred to scribd.com, since this could take a while
 */

function ipaper_transfer($node) {

  $files = $node->files;
  if ($files) $file = end($files);
  //returns the most recent upload for this node

  if (!($file)) {
    drupal_set_message("No file is attached.");
    drupal_goto("node/$node->nid");
    return;
  }

  if ($node->fid == $file->fid) {
    //drupal_set_message("The current version is already on scribd.");

    $scribd = ipaper_scribd_init();
    global $base_url;
    $docpath = $base_url .'/'. "node/$node->nid";
    //if license is unspecified, don't send anything to scribd
    if ($node->license=='ns') $node->license = NULL;
    $result = $scribd->changeSettings($node->doc_id, $node->title, '', $node->private, $node->license, NULL, NULL, NULL, $docpath);
    if (!$result) ipaper_report_error($scribd);

    drupal_goto("node/$node->nid");
    return;
  }

  //set the stage for a file upload
  $dest = url("ipaper_upload/$node->nid");
  drupal_set_html_head('<meta http-equiv="Refresh" content="0;URL='. $dest .'">');
  $text = theme('progress_bar', NULL, t('Preparing document...'));
  $text .= t('Depending on the size of your upload, this can take up to a minute.');
  return $text;

}
 
function ipaper_upload($node) {

  $starttime = time();
  $files = $node->files;
  if ($files) $file = end($files);
  //returns the most recent upload for this node

  $scribd = ipaper_scribd_init();
  $url = $file->filepath;
  $doc_type = null;
  $access = $node->private;
  //adds a new revision to an existing scribd document, if it exists
  if ($node->doc_id) {
    $rev_id = $node->doc_id;
  }
  else $rev_id = null;

  $data = $scribd->upload($url, $doc_type, $access, $rev_id); 

  if ($data) {
    $res=$scribd->getdocresult();
    $node->fid = $file->fid;
    $node->doc_id = $res->doc_id;
    $node->access_key = $res->access_key;
    $node->secret_password = $res->secret_password;

    //save to database
    _ipaper_dbupdate_params($node);

    if ($rev_id){
      drupal_set_message(t('A new version of your document has been uploaded. It may take a few minutes until the most recent version is displayed.'));
      file_delete(_ipaper_get_thumb_path($node->doc_id));
    }

    //set license settings (access/visibility settings were set at the time of the upload)
    global $base_url;
    $docpath = $base_url .'/'. "node/$node->nid";
    $scribd->changeSettings($node->doc_id, $node->title, '', $node->private, $node->license, NULL, NULL, NULL, $docpath);

    //wait for conversion to complete so that we can fetch the full text for the search index
    $stat = $scribd->getConversionStatus($node->doc_id);
    while ($stat != "DONE"){
      if ($stat == "ERROR"){
        drupal_set_message(t("Your document could not be successfully converted to an iPaper. See the message in the document display for more information"), 'error');
	watchdog("ipaper", "Scribd failed conversion for document '$node->title'", NULL, WATCHDOG_ERROR, l($node->title, "node/$node->nid"));
        drupal_goto("node/$node->nid");
        return;
      }
      //don't let the script run until php times out or more than 57 seconds
      if(time() - $starttime > min(ini_get('max_execution_time'), 57) ){
        drupal_set_message(t("Your document is taking unusually long to convert."));
        $message = t("Full text could not be retrieved. Exceeded time limit waiting for document to complete conversion: ");
        $message .= (time() - $starttime) . ' seconds.';
        watchdog("ipaper", $message, NULL, WATCHDOG_NOTICE, l($node->title, "node/$node->nid"));
        drupal_goto("node/$node->nid");
        return;
      }

      sleep(2);
      $stat = $scribd->getConversionStatus($node->doc_id);
    }

    //get full text for search index
    $texturl = $scribd->getDownloadURL($node->doc_id, 'txt');
    //for some reason, the URL comes back with leading and trailing spaces
    $texturl = trim($texturl);
    $full_text = _ipaper_request($texturl);
    $full_text = htmlspecialchars($full_text);
    $full_text = preg_replace('|(?<!<br />)\s*\n|', "<br />\n", $full_text); // make line breaks
    $node->full_text = $full_text;
    _ipaper_dbupdate_full_text($node);
    
    //finally, get the thumbnail
    _ipaper_save_thumb($node->doc_id, $scribd);

  }
  else ipaper_report_error($scribd);

  drupal_goto("node/$node->nid");

}

function ipaper_download($node){

  $doc_id = $node->doc_id;
  if ($doc_id){
    $scribd = ipaper_scribd_init();
    $format = variable_get('ipaper_download_format', 'pdf');
    $link = $scribd->getDownloadURL($node->doc_id, $format);
    $link = trim($link);
    if($link){
      drupal_goto($link);
      return;
    }
  }
  drupal_set_message("Not an iPaper or the download link is not available", 'error');
  drupal_goto("node/$nid");

}

function ipaper_scribd_init() {

  if (variable_get('scribd_api_key', '') == '') {
    drupal_set_message(t('The iPaper module has not yet been configured. You need to set an API key obtained from scribd.com/platform/start before you can use the module'), 'error');
  }

  require_once drupal_get_path('module', 'ipaper') .'/scribd.php';

  $scribd_api_key = variable_get('scribd_api_key', '');
  $scribd_secret = variable_get('scribd_secret_key', '');
  
  $scribd = new Scribd($scribd_api_key, $scribd_secret);

  //uncomment this if you want to store documents under the virtual accounts for each user
  //note that files created for virtual users are only accessible through the API
  //global $user;
  //$scribd->my_user_id = $user->name; // The user ID of one of your users

  return $scribd;
}


function ipaper_report_error($scribd) {

  drupal_set_message("Scribd error #". $scribd->geterror() .": ". $scribd->geterrormsg(), 'error');
  watchdog('ipaper', "Scribd error #". $scribd->geterror() .": ". $scribd->geterrormsg(), NULL, WATCHDOG_ERROR);

}

/**
 * Implementation of hook_view()
 */
function ipaper_view($node, $teaser = false, $page = false) {
  $node = node_prepare($node, $teaser);
  drupal_add_css(drupal_get_path('module', 'ipaper') .'/ipaper.css');

  if ($teaser == false){
    $type = node_get_types('type', 'ipaper');

    $fs = array(
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => $type->body_label,
      '#value' => $node->content['body']['#value'],
    );
    if ($type->has_body){
      $node->content['body']['#value'] = theme('fieldset', $fs); 
    }

    $node->content['viewer'] = array(
      '#value' => theme('ipaper_viewer', $node),
      '#weight' => 2,
    );

    if (user_access("download ipapers")) {
      $node->content['download_link'] = array(
        '#value' => theme('ipaper_download_link', $node),
        '#weight' => 3,
      );
    }

    if (variable_get('ipaper_show_scribd_link', 0)) {
      $node->content['scribd_link'] = array(
        '#value' => theme('ipaper_scribd_link', $node),
        '#weight' => 4,
      );
    }
    
    if (user_access("embed ipapers")) {
      $node->content['embed_code'] = array(
        '#value' => theme('ipaper_embed_code', $node),
        '#weight' => 5,
      );
    }

    if (variable_get('ipaper_show_full_text', 1) || variable_get('cron_semaphore', FALSE)) {
      $node->content['full_text'] = array(
        '#value' => theme('ipaper_full_text', $node),
        '#weight' => 6,
      );
    }

      $node->content['license'] = array(
        '#value' => theme('ipaper_license', $node),
        '#weight' => 8,
      );

  }//if teaser=false
  else{

    $node->content['body']['#value'] = "<div class=ipaper-descr-teaser>" . $node->content['body']['#value']."</div>\n";

    $node->content['thumbnail'] = array(
      '#value' => theme('ipaper_thumbnail', $node),
      '#weight' => -2,
    );
  }

  return $node;
}

/**
 * Implementation of hook_theme()
 */

function ipaper_theme() {
  return array(
    'ipaper_viewer' => array(
      'arguments' => array('node'),
    ),
    'ipaper_thumbnail' => array(
      'arguments' => array('node'),
    ),
    'ipaper_embed_code' => array(
      'arguments' => array('node'),
    ),
    'ipaper_download_link' => array(
      'arguments' => array('node'),
    ),
    'ipaper_scribd_link' => array(
      'arguments' => array('node'),
    ),
    'ipaper_full_text' => array(
      'arguments' => array('node'),
    ),
    'ipaper_license' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_ipaper_viewer($node) {

  if (!$node->doc_id) {
    $files = $node->files;
    if ($files){
      return l(t("The previous attempt to convert this document to an iPaper failed. Click here to retry."), "ipaper_transfer/$node->nid");
    }
    else{
      return t("Please upload a document to view it as an iPaper.");
    }
  }
  
  $extra = variable_get('ipaper_extra_parameters', '');
  $output = "
  <script type=text/javascript src='http://www.scribd.com/javascripts/view.js'></script> 
  <div id='embedded_flash_$node->doc_id'> 
    <a href='http://www.scribd.com'>Embedded Scribd iPaper - Requires Javascript and Flash Player</a>
  </div>
  <script type=text/javascript>
    var scribd_doc = scribd.Document.getDoc($node->doc_id, '$node->access_key'); 
    scribd_doc.addParam( 'jsapi_version', 1 );
    $extra
    scribd_doc.write('embedded_flash_$node->doc_id');

  </script>";

  return $output ."\n";
}

function theme_ipaper_thumbnail($node) {

  $size = variable_get('ipaper_thumbnail_size', 140);
  if($size == 0) return;
  
  $path = _ipaper_get_thumb_path($node->doc_id);
  if (file_exists($path)){
    $hover = "Thumbnail of $node->title";
    $href = file_create_url($path);
  }
  else{
    $href = url(drupal_get_path('module', 'ipaper') .'/empty.jpg');
    $hover = t("Thumbnail not yet available");
  }

  $output = '<img class="ipaper-thumbnail" src="'. $href .'" title="'. $hover .'" height="'. $size . '">';
  if (node_access('view', $node)){
    $output = '<a href="' . url("node/$node->nid") . '" title="Read more...">' . $output . "</a>";
  }
  return $output ."\n";
}

function theme_ipaper_embed_code($node) {
  $output = '<object codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" id="doc_!doc_id" name="doc_!doc_id" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" align="middle" height="500" width="100%"> <param name="movie" value="http://documents.scribd.com/ScribdViewer.swf?document_id=!doc_id&access_key=!access_key&page=&version=1&auto_size=true&viewMode="> <param name="quality" value="high"> <param name="play" value="true"> <param name="loop" value="true"> <param name="scale" value="showall"> <param name="wmode" value="opaque"> <param name="devicefont" value="false"> <param name="bgcolor" value="#ffffff"> <param name="menu" value="true"> <param name="allowFullScreen" value="true"> <param name="allowScriptAccess" value="always"> <param name="salign" value=""> <embed src = "http://documents.scribd.com/ScribdViewer.swf?document_id=!doc_id&access_key=!access_key&page=&version=1&auto_size=true&viewMode=" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" play="true" loop="true" scale="showall" wmode="opaque" devicefont="false" bgcolor="#ffffff" name="doc_!doc_id_object" menu="true" allowfullscreen="true" allowscriptaccess="always" salign="" type="application/x-shockwave-flash" align="middle"  height="500" width="100%"> </embed> </object>';
  $keys = array(
    '!doc_id' => $node->doc_id,
    '!access_key' => $node->access_key,
  );
  $output = t($output, $keys);
  $output = check_plain($output);
  $output = '
  <form action="" name="embedForm" id="embedForm">
    <label for="embed_code">Embed</label> 
    <input id="embed_code" name="embed_code" type="text" value=' . "'$output'" . ' onClick="javascript:document.embedForm.embed_code.focus();document.embedForm.embed_code.select();" readonly /> 
  </form>
  ';
  return $output;
}

function theme_ipaper_download_link($node) {
  if (!($node->doc_id)) return;
  $format = variable_get('ipaper_download_format', 'pdf');
  switch($format){
    case 'pdf': $text = " as PDF"; break;
    case 'txt': $text = " (plain text)"; break;
    case 'original': $text = '';
  }
  $text = t("Download document $text");
  $output = "<div class=\"ipaper-download-link ipaper-download-$format \">";
  $output .= l($text, "ipaper_download/$node->nid");
  $output .= '</div>';
  return $output ."\n";
}

function theme_ipaper_scribd_link($node) {
  if (!($node->doc_id)) return;
  $output = '<div class="ipaper-scribd-link">';

  $link = "http://www.scribd.com/doc/$node->doc_id";
  if ($node->private == 'private') {
    $link .= '?secret_password='. $node->secret_password;
  }

  $output .= '<a href="'. $link .'" target="_blank">Click here to view this document on www.scribd.com</a>';    
  $output .= '</div>';
  return $output ."\n";
}

function theme_ipaper_full_text($node) {
  $output  = '<noscript>Enable JavaScript in your browser to view this document as it was initially formatted.<br />';
  $output .= $node->full_text; 
  //check_plain is not necessary because the equivalent was already done when the full text was saved.
  $output .= '</noscript>';
  return $output ."\n";
}

function theme_ipaper_license($node) {
  if ($node->license == 'ns' || $node->license == '' || $node->license == NULL)
    return;
  $output = '<div class="ipaper-license">';
  switch ($node->license){
    case 'c': 
      $yr = date("Y", $node->created);
      $output .= "This document is &copy; $yr by $node->name - all rights reserved."; break;
    case 'pd': 
      $output .= 'This document has been released into the public domain.'; break;
    default:
      $licenses = ipaper_license_options();
      $title = $licenses[$node->license];
      $img = "<img src=http://i.creativecommons.org/l/$node->license/3.0/88x31.png>";
      $info = "http://creativecommons.org/licenses/$node->license/3.0/";
      $output .= "<a href=$info target=blank>$img</a> <br />";
      $output .= "Published under a Creative Commons License: <a href=$info target=_blank>$title</a>. <br/>";
  }
  
  $output .= '</div>';
  return $output ."\n";
}

/**
 * Ipaper Configuration Form
 */

function ipaper_config_form() {
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scribd API settings'),
    '#description' => t('These values are necessary for you to be able to upload iPapers. Set up a scribd API account at <a href="http://www.scribd.com/platform/start">http://www.scribd.com/platform/start</a>.'),
  );
  $form['api']['scribd_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' =>  variable_get('scribd_api_key', ''),
    '#description' => t('The scribd.com API key for your website.'),
  );
  $form['api']['scribd_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#default_value'   => variable_get('scribd_secret_key', ''),
    '#description' => t('The scribd.com secret key for your website.  This is optional but provides added security. Enable "Require API signature" in your Scribd to prevent third parties from using just the API key to post requests.'),
  );

  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ipaper cusomizations'),
    '#description' => t('These settings affect the options available when iPapers are created/edited'),
  );
  $form['nodes']['ipaper_default_private'] = array(
    '#type' => 'select',
    '#title' => t('Default visibility setting'),
    '#options' => ipaper_private_options(),
    '#default_value' =>  variable_get('ipaper_default_private', DEFAULT_PRIVATE),
    '#description' => t('Private documents are only available through your website. Public documents are also available on scribd.com and are indexed by search engines.'),
  );
  $form['nodes']['ipaper_choose_private'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show visibility option?'),
    '#default_value' =>  variable_get('ipaper_choose_private', 1),
    '#description' => t('Allow users to choose whether their documents are private or public?'),
  );
  $form['nodes']['ipaper_default_license'] = array(
    '#type' => 'select',
    '#title' => t('Licensing on scribd.com'),
    '#options' => ipaper_license_options(),
    '#default_value' =>  variable_get('ipaper_default_license', DEFAULT_LICENSE),
    '#description' => t('The license under which documents are released. The license is shown on scribd.com.'),
  );
  $form['nodes']['ipaper_choose_license'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show license option?'),
    '#default_value' =>  variable_get('ipaper_choose_license', 1),
    '#description' => t('Allow users to choose the license?'),
  );

  $form['nodeview'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node view'),
    '#description' => t('Control the display of iPapers as full nodes.'),
  );
  $form['nodeview']['ipaper_download_format'] = array(
    '#type' => 'select',
    '#title' => t('Download format'),
    '#options' => array('pdf'=>'PDF', 'original'=>'Original format', 'txt'=>"Plain text"),
    '#default_value' =>  variable_get('ipaper_download_format', 'pdf'),
    '#description' => t('This is the format that users with the "download ipapers" permissions will download the documents in.'),
  );
  $form['nodeview']['ipaper_show_scribd_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show link to Scribd document.'),
    '#default_value' =>  variable_get('ipaper_show_scribd_link', 0),
    '#description' => t('If checked, a link to view the document on scribd.com will be displayed.'),
  );
  $form['nodeview']['ipaper_show_full_text'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include full text on pages.'),
    '#default_value' =>  variable_get('ipaper_show_full_text', 1),
    '#description' => t('If checked, the plain text of the documents will be included on the pages in < noscript > tags (visible only to users that cannot see the iPaper viewer because Javascript is disabled. This is necessary if you want search engines to be able to index your content. However, it allows visitors to extract the text from the source of the page.'),
  );
  $form['nodeview']['ipaper_extra_parameters'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional Javascript API code'),
    '#default_value' =>  variable_get('ipaper_extra_parameters', ''),
    '#description' => t('You can customize the appearance of iPaper objects by adding additional JavaScript commands - for example, you can define a custom width for the iPaper viewer, choose book or fullscreen mode as default, or set the zoom level. For command reference, see <a href="http://www.scribd.com/publisher/api?method_name=Javascript+API">www.scribd.com/publisher/api</a>. var scribd_doc = ... and scribd_doc.write(...) are already included by this module.'),
  );

  $form['teaserview'] = array(
    '#type' => 'fieldset',
    '#title' => t('Teaser view'),
    '#description' => t('Teaser view customizations.'),
  );
  $form['teaserview']['ipaper_thumbnail_size'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail size (height)'),
    '#options' => array(0=>'none', 100=>'100px', 140=>'140px', 170=>'170px', 220=>'220px', 270=>'270px'),
    '#default_value' =>  variable_get('ipaper_thumbnail_size', '170px'),
    '#description' => t("Whether to download large or small thumbnails to display with iPaper nodes in teaser view. If you change this after you have created documents, you should rebuild your thumbnail cache. Note that for any values other than 100px and 220px, scaling is done in the user's browser."),
  );
  $form['teaserview']['clear'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild thumbnail cache'),
    '#submit' => array('ipaper_flush_thumb_cache_submit'),
    '#description' => t('Removes and re-downloads thumbnails stored in the ipaper_thumbs/ folder.'),
  );

  $form['admin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Administrator settings'),
    '#description' => t('Control the backend of the module.'),
  );
  $form['admin']['ipaper_log_requests'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log all API requests in watchdog'),
    '#default_value' =>  variable_get('ipaper_log_requests', 0),
    '#description' => t('Allows administrators to diagnose or track communication through the Scribd API.'),
  );

  $form['quickswitch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quickswitch'),
    '#description' => t('Quickswitch allows you to display the documents you have on your site as iPapers without manually uploading any files to scribd or creating iPaper nodes. To use this feature, go to <a href="http://www.scribd.com/platform/documentation/quickswitch">www.scribd.com/platform/documentation/quickswitch</a> and obtain the javascript code that applies to your preferences.'),
  );
  $form['quickswitch']['ipaper_show_quickswitch'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Quickswitch code on pages'),
    '#default_value' =>  variable_get('ipaper_show_quickswitch', 0),
    '#description' => t('Add code to your site? Enter the code below'),
  );
  $form['quickswitch']['ipaper_quickswitch_code'] = array(
    '#type' => 'textarea',
    '#title' => t('Quickswitch code'),
    '#default_value' =>  variable_get('ipaper_quickswitch_code', ''),
    '#description' => t('Enter the QuickSwitch code you got from scribd.com.'),
  );
  
  return system_settings_form($form);
}


/**
 * Implementation of hook_requirements().
 */
function ipaper_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    // Raise warning if API keys have not been entered.
    if (variable_get('scribd_api_key', '') == '') {
      $requirements['ipaper'] = array(
        'title' => t('iPaper configuration'),
        'description' => t('The iPaper module has not been configured. Please configure it from the <a href="@url">iPaper settings page</a>.', array('@url' => url('admin/settings/ipaper'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }
  }

  return $requirements;
}

function _ipaper_get_thumb_path($doc_id){
  return file_directory_path() .'/ipaper_thumbs/'. $doc_id .'.jpg';
}

/**
 * Cache thumbnails from scribd server.
 * Parameter $scribd represents an API object obtained through ipaper_scribd_init()
 */
function _ipaper_save_thumb($doc_id, $scribd){
  $size = variable_get('ipaper_thumbnail_size', 170);
  if($size == 0) return;

  $result = $scribd->getSettings($doc_id);
  //Trim is VERY important, cURL will break if this is not cleaned
  $source = trim($result['thumbnail_url']);

  if($size>100){
    //Get "large" version of thumbnail
    $source = str_replace('thumb', 'large', $source); 
  }
  $destination = _ipaper_get_thumb_path($doc_id);
  $request = _ipaper_request($source);
  if ($request) {
    // Check that the files directory is writable
    if (file_check_directory(dirname($destination), FILE_CREATE_DIRECTORY)) {
      $result = file_save_data($request, $destination, FILE_EXISTS_REPLACE);
      if ($result)
        return TRUE;
    }
    else{
      watchdog('ipaper', "Could not write thumbnail for doc_id $doc_id.", NULL, WATCHDOG_ERROR);
    }
  }//if $request
  return FALSE;
}

/**
 * Implementation of hook_flush_caches().
 */
function ipaper_flush_thumb_cache_submit(&$form_state, $form){
  file_scan_directory(file_directory_path() .'/ipaper_thumbs', '.*', array('.', '..', 'CVS'), 'file_delete');
  $query = db_query("SELECT doc_id FROM {ipaper} WHERE doc_id<>0");
  $scribd = ipaper_scribd_init();
  $count = 0;
  while ($result = db_fetch_array($query)){
    $saved = _ipaper_save_thumb($result['doc_id'], $scribd);
    if($saved) $count += 1;
  }
  drupal_set_message("Thumbnails cleared, $count new thumbnails saved.");
}

/**
 * Provides for increased compatibility by sending requests either through CURL or fsockopen(drupal_http_request)
 */
function _ipaper_request($request_url, $params = NULL, $method = 'GET'){

  if (variable_get('ipaper_log_requests', 0) && $params){
    $APImethod = $params['method'];
    $doc_id = $params['doc_id'] ? $params['doc_id'] : $params['doc_ids'];
    $link = $request_url . ipaper_list_params($params);
    watchdog('ipaper', "Action: $APImethod, Document ID: $doc_id", NULL, WATCHDOG_NOTICE, $link);
  }

  if (function_exists("curl_init")){
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $request_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    if ($method == 'POST')
      curl_setopt($ch, CURLOPT_POST, 1 );
    if ($params)
      curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
    $data = curl_exec($ch);
    if (curl_errno($ch)){
      $link = $request_url . ipaper_list_params($params);
      drupal_set_message(t("Request to Scribd.com failed. See the event log for more details."), 'error');
      watchdog("ipaper", t("Request failed (CURL)"). " - ". curl_error($ch) .' - '. $link, NULL, WATCHDOG_ERROR);
    }      
    curl_close($ch);
    return $data;
  }
  else{
    $headers = array();
    $data = NULL;
    if ($method == "POST"){
      require_once drupal_get_path('module', 'ipaper') .'/multipart.inc';
      $boundary = 'A0sFSD';
      $headers = array("Content-Type" => "multipart/form-data; boundary=$boundary");
      $data = multipart_encode($boundary, $params);
    }
    $request = drupal_http_request($request_url, $headers, $method, $data);
    if ($request->error){
      $link = $request_url . ipaper_list_params($params);
      drupal_set_message(t("Request to Scribd.com failed. See the event log for more details."), 'error');
      watchdog("ipaper", t("Request failed (FOPEN)"). " - ". $request->error .' - '. $link, NULL, WATCHDOG_ERROR);
    }
    return $request->data;
  }

}

function ipaper_list_params($params){
  if ($params == NULL) return;
  $output = '';
  foreach ($params as $key => $value)
    $output .= "&$key=$value";
  return $output;
}

/*
 * Implementation of hook_nodeapi()
 */

function ipaper_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  switch($op){
    case 'view':
      if (variable_get('ipaper_show_quickswitch', 0) && $a3 == FALSE && $node->type != 'ipaper'){
        $files = $node->content['files']['#value'];
        $output = '';
        //extract just the links
        while (strpos($files, '<a')){
          $p1 = strpos($files, '<a');
          $p2 = strpos($files, '</a>') + 4;
          $output .= substr($files, $p1, $p2-$p1) . "\n";
          $files = substr($files, $p2 + 4);
        }
        $output .= variable_get('ipaper_quickswitch_code', '');
        $node->content['files']['#value'] = $output;
      }
      break;
  }
}